[
    {
        "id": "44f9ec8549dd6cd0",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e4f2654eb37bf1b3",
        "type": "mqtt-broker",
        "name": "http",
        "broker": "broker.hivemq.com",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3b9e5927881a6d45",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "9f2637ddf31cbc5c",
        "type": "ui_tab",
        "name": "Logs",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "176a6dcb963246d5",
        "type": "ui_group",
        "name": "Main",
        "tab": "3b9e5927881a6d45",
        "order": 1,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9dff1546fd297e8c",
        "type": "ui_group",
        "name": "Main",
        "tab": "9f2637ddf31cbc5c",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d881abfa18477ebf",
        "type": "ui_spacer",
        "z": "44f9ec8549dd6cd0",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 10,
        "width": 16,
        "height": 1
    },
    {
        "id": "ead562f7e78cfd4a",
        "type": "ui_gauge",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "group": "176a6dcb963246d5",
        "order": 1,
        "width": 8,
        "height": 5,
        "gtype": "gage",
        "title": "PM2.5",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "504",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 80,
        "wires": []
    },
    {
        "id": "128b233e760ecc24",
        "type": "ui_gauge",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "group": "176a6dcb963246d5",
        "order": 2,
        "width": 8,
        "height": 5,
        "gtype": "gage",
        "title": "PM10",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "500.4",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "3c9ac084f74ed2e0",
        "type": "mqtt in",
        "z": "44f9ec8549dd6cd0",
        "name": "humid",
        "topic": "/23127354-23127388-23127435/humid",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e4f2654eb37bf1b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 100,
        "wires": [
            [
                "6ef572be12b90f31",
                "6c3df6288f4d1cc3"
            ]
        ]
    },
    {
        "id": "cdce23d8cfd92eef",
        "type": "mqtt in",
        "z": "44f9ec8549dd6cd0",
        "name": "temp",
        "topic": "/23127354-23127388-23127435/temp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e4f2654eb37bf1b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 180,
        "wires": [
            [
                "6ef572be12b90f31",
                "b4b759bf43ef4fbc"
            ]
        ]
    },
    {
        "id": "4f62ebb09931dcf6",
        "type": "mqtt in",
        "z": "44f9ec8549dd6cd0",
        "name": "pm25",
        "topic": "/23127354-23127388-23127435/pm25",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e4f2654eb37bf1b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 240,
        "wires": [
            [
                "6ef572be12b90f31",
                "9f818caafc037d6d"
            ]
        ]
    },
    {
        "id": "6ef572be12b90f31",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "Combine sensors",
        "func": "let type;\nlet value = parseFloat(msg.payload);\n\n// Xác định loại dữ liệu từ topic\nif (msg.topic.includes(\"humid\")) {\n    type = \"Humidity\";\n} else if (msg.topic.includes(\"temp\")) {\n    type = \"Temperature\";\n} else if (msg.topic.includes(\"pm25\")) {\n    type = \"PM2_5\";  // Sửa lại PM2.5\n} else if (msg.topic.includes(\"pm10\")) {\n    type = \"PM10\";\n} else {\n    type = \"Unknown\"; // Kiểm tra nếu topic không xác định\n}\n\n// Lưu giá trị vào flow context theo từng loại\nflow.set(type, value);\n\n// Lấy giá trị hiện có từ flow context\nlet humidity = flow.get(\"Humidity\");\nlet temp = flow.get(\"Temperature\");\nlet pm25 = flow.get(\"PM2_5\");\nlet pm10 = flow.get(\"PM10\");\n\n// Chỉ gửi dữ liệu khi đủ cả 4 giá trị\nif (humidity !== undefined && temp !== undefined && pm25 !== undefined && pm10 !== undefined) {\n    // Định dạng dữ liệu cho chart\n    let pmData = [\n        { x: new Date().toISOString(), y: pm25 },\n        { x: new Date().toISOString(), y: pm10 }\n    ];\n\n    let chartData = {\n        series: [\"PM2.5\", \"PM10\"],\n        data: [pmData[0], pmData[1]],\n        labels: [new Date().toISOString()]\n    };\n\n    // Dữ liệu cho các gauge\n    let gaugesData = {\n        PM2_5: pm25,\n        PM10: pm10,\n        Temperature: temp,\n        Humidity: humidity\n    };\n\n    // Trả lại dữ liệu dưới định dạng cho từng output\n    return [\n        { payload: pm25 },  // Output 1: PM2.5 (chỉ gửi giá trị)\n        { payload: pm10 },  // Output 2: PM10 (chỉ gửi giá trị)\n        { payload: temp },  // Output 3: Temperature (chỉ gửi giá trị)\n        { payload: humidity },  // Output 4: Humidity (chỉ gửi giá trị)\n        { payload: chartData },  // Output 5: Dữ liệu cho chart (PM2.5, PM10)\n        { payload: gaugesData }  // Output 6: Gauges data\n    ];\n} else {\n    return null;  // Trả về null nếu thiếu một trong các giá trị cần thiết\n}\n",
        "outputs": 6,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 200,
        "wires": [
            [
                "ead562f7e78cfd4a",
                "0bcea6bc537f889f",
                "161e259ed606b31d",
                "2732a42cd4fb391f"
            ],
            [
                "128b233e760ecc24",
                "20951328f4aaf99e",
                "9ee948c4df90fa38"
            ],
            [
                "3b0fc91ea32222da",
                "114fabc7adadf360"
            ],
            [
                "aa715177ac04340b",
                "cf61fc4ad1801a2f"
            ],
            [],
            []
        ]
    },
    {
        "id": "3b0fc91ea32222da",
        "type": "ui_text",
        "z": "44f9ec8549dd6cd0",
        "group": "176a6dcb963246d5",
        "order": 4,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Nhiệt độ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 640,
        "y": 200,
        "wires": []
    },
    {
        "id": "aa715177ac04340b",
        "type": "ui_text",
        "z": "44f9ec8549dd6cd0",
        "group": "176a6dcb963246d5",
        "order": 3,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Độ ẩm",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 630,
        "y": 260,
        "wires": []
    },
    {
        "id": "83aab99b8e08506d",
        "type": "ui_chart",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "group": "176a6dcb963246d5",
        "order": 6,
        "width": 16,
        "height": 8,
        "label": "PM chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1000",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#7f4606",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "735782d262f247c0",
        "type": "mqtt out",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "topic": "/23127354-23127388-23127435/led-buzzer",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e4f2654eb37bf1b3",
        "x": 650,
        "y": 560,
        "wires": []
    },
    {
        "id": "b45547cb7567bc40",
        "type": "ui_table",
        "z": "44f9ec8549dd6cd0",
        "group": "9dff1546fd297e8c",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 270,
        "y": 660,
        "wires": []
    },
    {
        "id": "25176735d677fbf6",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "Table Logs",
        "func": "// Lấy dữ liệu log từ flow\nlet data = flow.get(\"logData\") || [];\n\n// Định dạng lại cho ui_table\n// Mỗi phần tử là 1 dòng trong bảng\nlet tableData = data.map(d => {\n    return {\n        Time: d.Time,                // dạng HH:mm hoặc full datetime\n        PM2_5: d.PM2_5,\n        PM10: d.PM10,\n        Temperature: d.Temperature,\n        Humidity: d.Humidity\n    };\n});\n\n// Gửi sang ui_table\nmsg.payload = tableData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 660,
        "wires": [
            [
                "b45547cb7567bc40"
            ]
        ]
    },
    {
        "id": "d5ac11d27f9002cd",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "Avg & Status",
        "func": "let data = flow.get(\"logData\") || [];\nif (data.length === 0) return null;\n\nlet avg = {\n    PM2_5: 0,\n    PM10: 0,\n    Temp: 0,\n    Humidity: 0\n};\n\n// Cộng dồn\ndata.forEach(d => {\n    avg.PM2_5 += d.PM2_5;\n    avg.PM10 += d.PM10;\n    avg.Temp += d.Temperature;\n    avg.Humidity += d.Humidity;\n});\n\n// Tính trung bình\navg.PM2_5 = (avg.PM2_5 / data.length).toFixed(1);\navg.PM10 = (avg.PM10 / data.length).toFixed(1);\navg.Temp = (avg.Temp / data.length).toFixed(1);\navg.Humidity = (avg.Humidity / data.length).toFixed(0);\n\n// Hàm xác định trạng thái\nfunction statusPM(v) {\n    if (v <= 12) return \"Good\";\n    if (v <= 35) return \"Moderate\";\n    return \"Unhealthy\";\n}\n\nmsg.payload = {\n    PM2_5: { value: avg.PM2_5, status: statusPM(avg.PM2_5) },\n    PM10: { value: avg.PM10, status: statusPM(avg.PM10) },\n    Temp: { value: avg.Temp, status: \"Moderate\" },     // Bạn có thể thêm logic riêng\n    Humidity: { value: avg.Humidity, status: \"Moderate\" }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 720,
        "wires": [
            [
                "647bd5e4ef48427d"
            ]
        ]
    },
    {
        "id": "647bd5e4ef48427d",
        "type": "ui_template",
        "z": "44f9ec8549dd6cd0",
        "group": "9dff1546fd297e8c",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div style=\"background-color: #E6F7FF; padding: 15px; border-radius: 8px;\">\n    <h3>Average</h3>\n    <div ng-repeat=\"(key, item) in msg.payload\"\n        style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;\">\n        <div style=\"width: 80px; font-weight: bold;\">{{key}}</div>\n        <div style=\"background-color: #6ED6E1; padding: 5px 10px; border-radius: 5px; font-weight: bold;\">{{item.value}}\n        </div>\n        <div style=\"background-color: #FFF3C4; padding: 5px 10px; border-radius: 5px;\">{{item.status}}</div>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 280,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "900c33bd8785df2f",
        "type": "ui_template",
        "z": "44f9ec8549dd6cd0",
        "group": "176a6dcb963246d5",
        "name": "Display",
        "order": 8,
        "width": 5,
        "height": 5,
        "format": "<!-- Display Template -->\n<style>\n    .display-panel {\n        background-color: #E6F7FF;\n        padding: 15px;\n        border-radius: 8px;\n        width: 100%;\n        box-sizing: border-box;\n        overflow-x: hidden;\n        height: 300px;\n        display: flex;\n        flex-direction: column;\n    }\n\n    .display-panel h3 {\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 15px;\n        background: none;\n    }\n\n    .display-buttons {\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        flex: 1;\n        justify-content: center;\n    }\n\n    .display-btn {\n        color: white;\n        padding: 12px;\n        border: none;\n        border-radius: 5px;\n        font-weight: bold;\n        width: 100%;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        position: relative;\n        overflow: hidden;\n    }\n\n    .display-btn.dust {\n        background-color: #1AA6B7;\n    }\n\n    .display-btn.temp,\n    .display-btn.humidity {\n        background-color: #63C7B2;\n    }\n\n    .display-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    }\n\n    .display-btn:active {\n        transform: translateY(0);\n    }\n\n    .display-btn.selected {\n        background-color: #4D94FF !important;\n        box-shadow: 0 0 10px rgba(77, 148, 255, 0.5);\n    }\n\n    /* Ripple effect */\n    .display-btn::after {\n        content: '';\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        width: 0;\n        height: 0;\n        border-radius: 50%;\n        background: rgba(255, 255, 255, 0.3);\n        transform: translate(-50%, -50%);\n        transition: width 0.6s, height 0.6s;\n    }\n\n    .display-btn.ripple::after {\n        width: 300px;\n        height: 300px;\n    }\n</style>\n\n<div class=\"display-panel\">\n    <h3>Display</h3>\n    <div class=\"display-buttons\">\n        <button class=\"display-btn dust\"\n            ng-click=\"selectDisplay('dust')\"\n            ng-class=\"{'selected': msg.selectedDisplay == 'dust'}\">\n      Dust\n    </button>\n        <button class=\"display-btn temp\"\n            ng-click=\"selectDisplay('temp')\"\n            ng-class=\"{'selected': msg.selectedDisplay == 'temp'}\">\n      Temp\n    </button>\n        <button class=\"display-btn humidity\"\n            ng-click=\"selectDisplay('humid')\"\n            ng-class=\"{'selected': msg.selectedDisplay == 'humid'}\">\n      Humidity\n    </button>\n    </div>\n</div>\n\n<script>\n    // AngularJS controller cho Display\n  (function(scope) {\n    scope.selectedDisplay = null;\n    \n    scope.selectDisplay = function(type) {\n      // Xóa class selected từ tất cả buttons\n      setTimeout(() => {\n        document.querySelectorAll('.display-btn').forEach(btn => {\n          btn.classList.remove('selected', 'ripple');\n        });\n        \n        // Thêm class selected và ripple effect cho button được click\n        const clickedBtn = event.target;\n        clickedBtn.classList.add('selected', 'ripple');\n        \n        // Xóa ripple effect sau animation\n        setTimeout(() => {\n          clickedBtn.classList.remove('ripple');\n        }, 600);\n      }, 10);\n      \n      scope.selectedDisplay = type;\n      \n      // Gửi payload đến Node-RED\n      scope.send({\n        payload: type,\n        selectedDisplay: type\n      });\n    };\n  })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 100,
        "y": 500,
        "wires": [
            [
                "95c87862e5f44601"
            ]
        ]
    },
    {
        "id": "1bd9979aecfb2758",
        "type": "ui_template",
        "z": "44f9ec8549dd6cd0",
        "group": "176a6dcb963246d5",
        "name": "Sound & Light",
        "order": 9,
        "width": 5,
        "height": 5,
        "format": "<!-- Sound & Light Template -->\n<style>\n    .sound-light-panel {\n        background-color: #E6F7FF;\n        padding: 15px;\n        border-radius: 8px;\n        width: 100%;\n        box-sizing: border-box;\n        overflow-x: hidden;\n        height: 300px;\n        display: flex;\n        flex-direction: column;\n    }\n\n    .sound-light-panel h3 {\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 15px;\n        background: none;\n    }\n\n    .sound-light-content {\n        display: grid;\n        grid-template-columns: 1fr auto;\n        gap: 15px;\n        align-items: center;\n        flex: 1;\n        align-content: center;\n    }\n\n    .sound-light-content span {\n        font-weight: bold;\n        font-size: 16px;\n    }\n\n    .toggle-btn {\n        background-color: #6ED6E1;\n        border: none;\n        padding: 8px 15px;\n        border-radius: 5px;\n        font-weight: bold;\n        width: 70px;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        position: relative;\n        overflow: hidden;\n    }\n\n    .toggle-btn:hover {\n        transform: scale(1.05);\n    }\n\n    .toggle-btn.on {\n        background-color: #4CAF50 !important;\n        color: white;\n        box-shadow: 0 0 10px rgba(76, 175, 80, 0.4);\n    }\n\n    .toggle-btn.off {\n        background-color: #f44336 !important;\n        color: white;\n    }\n\n    /* Animation cho toggle */\n    .toggle-btn::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: -100%;\n        width: 100%;\n        height: 100%;\n        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);\n        transition: left 0.5s;\n    }\n\n    .toggle-btn.animate::before {\n        left: 100%;\n    }\n</style>\n\n<div class=\"sound-light-panel\">\n    <h3>Sounds & Light</h3>\n    <div class=\"sound-light-content\">\n        <span>LED</span>\n        <button class=\"toggle-btn\"\n            ng-click=\"toggleLED()\"\n            ng-class=\"{'on': msg.ledState == 'ON', 'off': msg.ledState != 'ON'}\">\n      {{msg.ledState || 'OFF'}}\n    </button>\n        <span>BUZZER</span>\n        <button class=\"toggle-btn\"\n            ng-click=\"toggleBuzzer()\"\n            ng-class=\"{'on': msg.buzzerState == 'ON', 'off': msg.buzzerState != 'ON'}\">\n      {{msg.buzzerState || 'OFF'}}\n    </button>\n    </div>\n</div>\n\n<script>\n    // AngularJS controller cho Sound & Light\n  (function(scope) {\n    scope.ledState = 'OFF';\n    scope.buzzerState = 'OFF';\n    \n    scope.toggleLED = function() {\n      const btn = event.target;\n      btn.classList.add('animate');\n      \n      setTimeout(() => {\n        scope.ledState = scope.ledState === 'ON' ? 'OFF' : 'ON';\n        scope.$apply(); // Cập nhật view\n        btn.classList.remove('animate');\n      }, 250);\n      \n      // Gửi payload đến Node-RED\n      setTimeout(() => {\n        scope.send({\n          payload: 'led_toggle',\n          ledState: scope.ledState\n        });\n      }, 300);\n    };\n    \n    scope.toggleBuzzer = function() {\n      const btn = event.target;\n      btn.classList.add('animate');\n      \n      setTimeout(() => {\n        scope.buzzerState = scope.buzzerState === 'ON' ? 'OFF' : 'ON';\n        scope.$apply(); // Cập nhật view\n        btn.classList.remove('animate');\n      }, 250);\n      \n      // Gửi payload đến Node-RED\n      setTimeout(() => {\n        scope.send({\n          payload: 'buzzer_toggle',\n          buzzerState: scope.buzzerState\n        });\n      }, 300);\n    };\n    \n    // Lắng nghe tin nhắn từ Node-RED để cập nhật trạng thái\n    scope.$watch('msg', function(newMsg) {\n      if (newMsg) {\n        if (newMsg.ledState !== undefined) {\n          scope.ledState = newMsg.ledState;\n        }\n        if (newMsg.buzzerState !== undefined) {\n          scope.buzzerState = newMsg.buzzerState;\n        }\n      }\n    });\n  })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 120,
        "y": 560,
        "wires": [
            [
                "37e81acb91ec53b2"
            ]
        ]
    },
    {
        "id": "37e81acb91ec53b2",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "handleControlToggle",
        "func": "if (msg.payload === 'led_toggle') {\n    let state = flow.get(\"led_state\") || \"OFF\";\n    if (state === \"OFF\") {\n        state = \"ON\";\n        msg.payload = \"LED_ON\";\n    } else {\n        state = \"OFF\";\n        msg.payload = \"LED_OFF\";\n    }\n    flow.set(\"led_state\", state);\n    msg.ledState = state;\n    msg.topic = \"/23127354-23127388-23127435/led-buzzer\";\n}\nelse if (msg.payload === 'buzzer_toggle') {\n    let state = flow.get(\"buzzer_state\") || \"OFF\";\n    if (state === \"OFF\") {\n        state = \"ON\";\n        msg.payload = \"BUZZER_ON\";\n    } else {\n        state = \"OFF\";\n        msg.payload = \"BUZZER_OFF\";\n    }\n    flow.set(\"buzzer_state\", state);\n    msg.buzzerState = state;\n    msg.topic = \"/23127354-23127388-23127435/led-buzzer\";\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 560,
        "wires": [
            [
                "735782d262f247c0"
            ]
        ]
    },
    {
        "id": "1d8a4357c4e55e0f",
        "type": "mqtt out",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "topic": "/23127354-23127388-23127435/screen",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e4f2654eb37bf1b3",
        "x": 640,
        "y": 500,
        "wires": []
    },
    {
        "id": "ecf1817639760998",
        "type": "mqtt in",
        "z": "44f9ec8549dd6cd0",
        "name": "pm10",
        "topic": "/23127354-23127388-23127435/pm10",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e4f2654eb37bf1b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 300,
        "wires": [
            [
                "6ef572be12b90f31",
                "d3e0883518791ff7"
            ]
        ]
    },
    {
        "id": "6c3df6288f4d1cc3",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 80,
        "wires": []
    },
    {
        "id": "b4b759bf43ef4fbc",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 120,
        "wires": []
    },
    {
        "id": "9f818caafc037d6d",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 260,
        "wires": []
    },
    {
        "id": "d3e0883518791ff7",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 300,
        "wires": []
    },
    {
        "id": "0bcea6bc537f889f",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 20,
        "wires": []
    },
    {
        "id": "a7e8a6f754323184",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "alert_noti",
        "func": "// Đảm bảo có label và payload là số\nlet label = msg.label;\nlet value = msg.payload;\n\nif (!label || typeof value !== \"number\") {\n    msg.payload = {\n        alert: \"sai label\",\n    };\n    return msg;  // Bỏ qua nếu không hợp lệ\n}\n\n// Lưu giá trị vào flow context\nflow.set(label, value);\n\n// Lấy lại giá trị từ bộ nhớ\nlet pm25 = flow.get(\"PM2_5\");\nlet pm10 = flow.get(\"PM10\");\n\n// Chỉ xử lý khi đã có đủ cả hai\nif (pm25 === undefined || pm10 === undefined) {\n    msg.payload = {\n        alert: \"Chua du hai du lieu\",\n        PM2_5: pm25,\n        PM10: pm10,\n        timestamp: new Date().toISOString()\n    };\n    return msg;\n}\n\n// Kiểm tra trạng thái cảnh báo\nlet isAlert = (pm25 > 35.4 || pm10 > 154);\nlet wasAlert = flow.get(\"alert_state\") || false;\n\nif (isAlert && !wasAlert) {\n    flow.set(\"alert_state\", true);\n    msg.payload = \"ALERT\";\n    return msg;\n} else if (!isAlert && wasAlert) {\n    flow.set(\"alert_state\", false);\n    msg.payload = {\n        alert: \"SAFE\",\n        PM2_5: pm25,\n        PM10: pm10,\n        timestamp: new Date().toISOString()\n    };\n    return msg;\n}\n\n// Không thay đổi trạng thái → không gửi gì\nmsg.payload = {\n    alert: \"no change state\",\n    PM2_5: pm25,\n    PM10: pm10,\n    timestamp: new Date().toISOString()\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 80,
        "wires": [
            [
                "463c2a4805e8558a",
                "e019e163822b0e2f"
            ]
        ]
    },
    {
        "id": "bc2ba3b6d9e04c4d",
        "type": "mqtt out",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "topic": "/23127354-23127388-23127435/alert",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e4f2654eb37bf1b3",
        "x": 1410,
        "y": 120,
        "wires": []
    },
    {
        "id": "463c2a4805e8558a",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 60,
        "wires": []
    },
    {
        "id": "161e259ed606b31d",
        "type": "delay",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 820,
        "y": 80,
        "wires": [
            [
                "a4c63d27551f2d07"
            ]
        ]
    },
    {
        "id": "20951328f4aaf99e",
        "type": "delay",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 820,
        "y": 140,
        "wires": [
            [
                "a7480709ef7daefa"
            ]
        ]
    },
    {
        "id": "e019e163822b0e2f",
        "type": "switch",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ALERT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 160,
        "wires": [
            [
                "bc2ba3b6d9e04c4d",
                "e256282f093959a6"
            ]
        ]
    },
    {
        "id": "a4c63d27551f2d07",
        "type": "change",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "label",
                "pt": "msg",
                "to": "\"PM2_5\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 40,
        "wires": [
            [
                "a7e8a6f754323184"
            ]
        ]
    },
    {
        "id": "a7480709ef7daefa",
        "type": "change",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "label",
                "pt": "msg",
                "to": "\"PM10\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 180,
        "wires": [
            [
                "a7e8a6f754323184"
            ]
        ]
    },
    {
        "id": "4417533a5fbc673b",
        "type": "http request",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://www.pushsafer.com/api?k=hIFTbiwdL2VJfWmVBa0C&m={{payload}}&t=CẢNH BÁO CHẤT LƯỢNG KHÔNG KHÍ NGUY HIỂM&s=1&v=1&p=2",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1470,
        "y": 240,
        "wires": [
            [
                "57d078ea5821554b"
            ]
        ]
    },
    {
        "id": "e256282f093959a6",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "function 2",
        "func": "// Lấy giá trị PM2_5 và PM10 từ flow context\nlet pm25 = flow.get(\"PM2_5\");\nlet pm10 = flow.get(\"PM10\");\n\n\n// Chuẩn bị payload chỉ chứa dữ liệu\nmsg.payload = `PM2.5: ${pm25 || 0} µgm, PM10: ${pm10 || 0} µgm`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 260,
        "wires": [
            [
                "4417533a5fbc673b"
            ]
        ]
    },
    {
        "id": "57d078ea5821554b",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 320,
        "wires": []
    },
    {
        "id": "95c87862e5f44601",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "handleDisplayClick",
        "func": "// msg.payload sẽ là 'dust', 'temp' hoặc 'humid' từ template Display\nmsg.topic = \"/23127354-23127388-23127435/screen\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 500,
        "wires": [
            [
                "1d8a4357c4e55e0f"
            ]
        ]
    },
    {
        "id": "53eae1a3e881dc0c",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 880,
        "wires": []
    },
    {
        "id": "2732a42cd4fb391f",
        "type": "change",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"field1\": payload}",
                "tot": "jsonata",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 660,
        "wires": [
            [
                "775501084a4add1a",
                "251f3bcbda2eb3d8"
            ]
        ]
    },
    {
        "id": "9ee948c4df90fa38",
        "type": "change",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"field2\": payload}",
                "tot": "jsonata",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 700,
        "wires": [
            [
                "775501084a4add1a"
            ]
        ]
    },
    {
        "id": "114fabc7adadf360",
        "type": "change",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"field3\": payload}",
                "tot": "jsonata",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 740,
        "wires": [
            [
                "775501084a4add1a"
            ]
        ]
    },
    {
        "id": "cf61fc4ad1801a2f",
        "type": "change",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"field4\": payload}",
                "tot": "jsonata",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 780,
        "wires": [
            [
                "775501084a4add1a"
            ]
        ]
    },
    {
        "id": "775501084a4add1a",
        "type": "join",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "5",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 750,
        "y": 700,
        "wires": [
            [
                "53eae1a3e881dc0c",
                "83123354d96fad22"
            ]
        ]
    },
    {
        "id": "83123354d96fad22",
        "type": "http request",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/update?api_key=WXCJIZN3BFGAPQ1L&field1={{payload.field1}}&field2={{payload.field2}}&field3={{payload.field3}}&field4={{payload.field4}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1030,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "3252bd16c9258e72",
        "type": "inject",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 840,
        "wires": [
            [
                "0434c3f23a1d37b6"
            ]
        ]
    },
    {
        "id": "0434c3f23a1d37b6",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "251f3bcbda2eb3d8",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 640,
        "wires": []
    },
    {
        "id": "5540029422774b19",
        "type": "inject",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 920,
        "wires": [
            [
                "9c4b3d65b377de05"
            ]
        ]
    },
    {
        "id": "a6d2e7f44cb2ec20",
        "type": "json",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 920,
        "wires": [
            [
                "0813cd42da4b673f",
                "9b2f53fd8a4295d9",
                "32ed8ffbd2c0c3e6"
            ]
        ]
    },
    {
        "id": "9c4b3d65b377de05",
        "type": "http request",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/3030128/feeds.json?api_key=A2AAQJ1EF8O43YAP&results=1000",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 920,
        "wires": [
            [
                "a6d2e7f44cb2ec20"
            ]
        ]
    },
    {
        "id": "0813cd42da4b673f",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 960,
        "wires": []
    },
    {
        "id": "9b2f53fd8a4295d9",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "line chart",
        "func": "// Alternative format - thử cái này nếu format trên không hoạt động\nconst feeds = msg.payload.feeds;\n\nlet chartData = [];\n\nfeeds.forEach(feed => {\n    const timestamp = new Date(feed.created_at).getTime();\n    \n    // Format mỗi data point riêng biệt\n    if (feed.field1 !== null && feed.field1 !== undefined && feed.field1 !== \"\") {\n        chartData.push({\n            series: \"PM2.5\",\n            x: timestamp,\n            y: parseFloat(feed.field1)\n        });\n    }\n    \n    if (feed.field2 !== null && feed.field2 !== undefined && feed.field2 !== \"\") {\n        chartData.push({\n            series: \"PM10\", \n            x: timestamp,\n            y: parseFloat(feed.field2)\n        });\n    }\n});\n\n// Sắp xếp theo thời gian\nchartData.sort((a, b) => a.x - b.x);\n\nmsg.payload = chartData;\nmsg.topic = \"PM Data\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 920,
        "wires": [
            [
                "83aab99b8e08506d"
            ]
        ]
    },
    {
        "id": "32ed8ffbd2c0c3e6",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "avg",
        "func": "// Lấy dữ liệu feeds từ ThingSpeak\nconst feeds = msg.payload.feeds;\n\n// Kiểm tra dữ liệu đầu vào\nif (!feeds || !Array.isArray(feeds)) {\n    node.error(\"Không có dữ liệu feeds hợp lệ\");\n    return null;\n}\n\nlet pm25Values = [];\nlet pm10Values = [];\n\n// Thu thập tất cả giá trị hợp lệ\nfeeds.forEach(feed => {\n    // Thu thập PM2.5 values\n    if (feed.field1 !== null && feed.field1 !== undefined && feed.field1 !== \"\") {\n        const pm25 = parseFloat(feed.field1);\n        if (!isNaN(pm25)) {\n            pm25Values.push(pm25);\n        }\n    }\n    \n    // Thu thập PM10 values  \n    if (feed.field2 !== null && feed.field2 !== undefined && feed.field2 !== \"\") {\n        const pm10 = parseFloat(feed.field2);\n        if (!isNaN(pm10)) {\n            pm10Values.push(pm10);\n        }\n    }\n});\n\n// Tính trung bình\nlet pm25Avg = 0;\nlet pm10Avg = 0;\n\nif (pm25Values.length > 0) {\n    pm25Avg = pm25Values.reduce((sum, val) => sum + val, 0) / pm25Values.length;\n}\n\nif (pm10Values.length > 0) {\n    pm10Avg = pm10Values.reduce((sum, val) => sum + val, 0) / pm10Values.length;\n}\n\n// Làm tròn đến 1 chữ số thập phân\npm25Avg = Math.round(pm25Avg * 10) / 10;\npm10Avg = Math.round(pm10Avg * 10) / 10;\n\n// Log kết quả\nnode.warn(`PM2.5 Average: ${pm25Avg} μg/m³ (từ ${pm25Values.length} samples)`);\nnode.warn(`PM10 Average: ${pm10Avg} μg/m³ (từ ${pm10Values.length} samples)`);\n\n// Tạo payload cho Template node (chỉ 1 output)\nmsg.payload = {\n    pm25_avg: pm25Avg,\n    pm10_avg: pm10Avg,\n    pm25_count: pm25Values.length,\n    pm10_count: pm10Values.length\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1000,
        "wires": [
            [
                "626729eb8731508b"
            ]
        ]
    },
    {
        "id": "626729eb8731508b",
        "type": "ui_template",
        "z": "44f9ec8549dd6cd0",
        "group": "176a6dcb963246d5",
        "name": "PM Avg",
        "order": 7,
        "width": 10,
        "height": 4,
        "format": "<div\n    style=\"background-color: #e2e8f0; padding: 20px; border-radius: 12px; text-align: left; font-family: Arial, sans-serif; width: 100%; margin: 0; box-sizing: border-box;\">\n    <h2 style=\"margin: 0 0 25px 0; font-size: 22px; font-weight: bold; text-align: center; color: #1a202c;\">Average</h2>\n\n    <div style=\"margin-bottom: 20px;\">\n        <div style=\"display: flex; align-items: center; justify-content: space-between;\">\n            <span style=\"font-size: 18px; font-weight: bold; color: #2d3748;\">PM2.5</span>\n            <div\n                style=\"background-color: #81e6d9; color: #1a202c; padding: 12px 24px; border-radius: 8px; font-size: 16px; font-weight: bold; min-width: 60px; text-align: center;\">\n                {{msg.payload.pm25_avg}}\n            </div>\n        </div>\n    </div>\n\n    <div>\n        <div style=\"display: flex; align-items: center; justify-content: space-between;\">\n            <span style=\"font-size: 18px; font-weight: bold; color: #2d3748;\">PM10</span>\n            <div\n                style=\"background-color: #81e6d9; color: #1a202c; padding: 12px 24px; border-radius: 8px; font-size: 16px; font-weight: bold; min-width: 60px; text-align: center;\">\n                {{msg.payload.pm10_avg}}\n            </div>\n        </div>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 780,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "99fedf9f5f3bfe87",
        "type": "ui_template",
        "z": "44f9ec8549dd6cd0",
        "group": "176a6dcb963246d5",
        "name": "temp/humid",
        "order": 5,
        "width": 10,
        "height": 4,
        "format": "<div\n    style=\"background-color: #e2e8f0; padding: 20px; border-radius: 12px; text-align: left; font-family: Arial, sans-serif; width: 100%; margin: 0; box-sizing: border-box;\">\n    <h2 style=\"margin: 0 0 25px 0; font-size: 22px; font-weight: bold; text-align: center; color: #1a202c;\">Average</h2>\n\n    <div style=\"margin-bottom: 20px;\">\n        <div style=\"display: flex; align-items: center; justify-content: space-between;\">\n            <span style=\"font-size: 18px; font-weight: bold; color: #2d3748;\">Temperature</span>\n            <div\n                style=\"background-color: #81e6d9; color: #1a202c; padding: 12px 24px; border-radius: 8px; font-size: 16px; font-weight: bold; min-width: 60px; text-align: center;\">\n                {{msg.payload.temp}}\n            </div>\n        </div>\n    </div>\n\n    <div>\n        <div style=\"display: flex; align-items: center; justify-content: space-between;\">\n            <span style=\"font-size: 18px; font-weight: bold; color: #2d3748;\">Humidity</span>\n            <div\n                style=\"background-color: #81e6d9; color: #1a202c; padding: 12px 24px; border-radius: 8px; font-size: 16px; font-weight: bold; min-width: 60px; text-align: center;\">\n                {{msg.payload.humid}}\n            </div>\n        </div>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "fae3a0c2344394f0",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "Save Original Password",
        "func": "var username = msg.payload.username;\nmsg.original_password = msg.payload.password; // Lưu pass gốc để so sánh\nmsg.method = \"GET\";\nmsg.url = \"https://iot-user-4e30c-default-rtdb.asia-southeast1.firebasedatabase.app/users/\" + username + \".json\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1080,
        "wires": [
            [
                "4909bf9a676b36a1",
                "abef85674b4ffc62"
            ]
        ]
    },
    {
        "id": "4909bf9a676b36a1",
        "type": "http request",
        "z": "44f9ec8549dd6cd0",
        "name": "Get User Data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 600,
        "y": 1080,
        "wires": [
            [
                "121bf687b59f8444",
                "d72901a5bc88a040"
            ]
        ]
    },
    {
        "id": "121bf687b59f8444",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "Check Password",
        "func": "if (!msg.payload) {\n    msg.payload = { status: \"Log:   ❌ User not found\", loggedIn: false };\n    context.set(\"loggedIn\", false);\n    return [null, msg];\n}\n\nif (msg.payload.password === msg.original_password) {\n    msg.payload = { status: \"✅ Login successful\", loggedIn: true };\n    context.set(\"loggedIn\", true);\n    return [msg, null];\n} else {\n    msg.payload = { status: \"Log:   ❌ Wrong password\", loggedIn: false };\n    context.set(\"loggedIn\", false);\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1080,
        "wires": [
            [
                "d8385aac97153200",
                "097f807467e75b4d"
            ],
            [
                "bedc50b76d12e681",
                "56d262416d18aaae"
            ]
        ]
    },
    {
        "id": "d8385aac97153200",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "Login OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1060,
        "wires": []
    },
    {
        "id": "bedc50b76d12e681",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "Login Fail",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1100,
        "wires": []
    },
    {
        "id": "abef85674b4ffc62",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1160,
        "wires": []
    },
    {
        "id": "d72901a5bc88a040",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1020,
        "wires": []
    },
    {
        "id": "4060ea9c5b87d1b9",
        "type": "ui_form",
        "z": "44f9ec8549dd6cd0",
        "name": "Login Form",
        "label": "",
        "group": "b35559caedba2363",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 120,
        "y": 1140,
        "wires": [
            [
                "fae3a0c2344394f0",
                "b8b4e8dba278ef38"
            ]
        ]
    },
    {
        "id": "b8b4e8dba278ef38",
        "type": "debug",
        "z": "44f9ec8549dd6cd0",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 1220,
        "wires": []
    },
    {
        "id": "097f807467e75b4d",
        "type": "switch",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "property": "msg.payload.loggedIn",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 1320,
        "wires": [
            [
                "c2e704a485b72fca"
            ],
            [
                "4060ea9c5b87d1b9"
            ]
        ]
    },
    {
        "id": "c99a8c838a1ab2c1",
        "type": "ui_ui_control",
        "z": "44f9ec8549dd6cd0",
        "name": "",
        "events": "all",
        "x": 1480,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "c2e704a485b72fca",
        "type": "function",
        "z": "44f9ec8549dd6cd0",
        "name": "function 5",
        "func": "msg.payload = { tab: \"Home\", enabled: true }; // Thay \"Home\" bằng tab bạn muốn hiển thị\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1300,
        "wires": [
            [
                "c99a8c838a1ab2c1"
            ]
        ]
    },
    {
        "id": "56d262416d18aaae",
        "type": "ui_text",
        "z": "44f9ec8549dd6cd0",
        "group": "b35559caedba2363",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload.status}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1030,
        "y": 940,
        "wires": []
    },
    {
        "id": "b35559caedba2363",
        "type": "ui_group",
        "name": "Login",
        "tab": "da41e42544591d8d",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "da41e42544591d8d",
        "type": "ui_tab",
        "name": "Authen",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]