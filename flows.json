[
    {
        "id": "8dda81f9590d2155",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "de8837020ce39d8d",
        "type": "ui_gauge",
        "z": "8dda81f9590d2155",
        "name": "",
        "group": "176a6dcb963246d5",
        "order": 1,
        "width": 9,
        "height": 6,
        "gtype": "gage",
        "title": "PM2.5",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "504",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 530,
        "y": 20,
        "wires": []
    },
    {
        "id": "79d3217229c8fd0e",
        "type": "ui_gauge",
        "z": "8dda81f9590d2155",
        "name": "",
        "group": "176a6dcb963246d5",
        "order": 2,
        "width": 9,
        "height": 6,
        "gtype": "gage",
        "title": "PM10",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "500.4",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 530,
        "y": 60,
        "wires": []
    },
    {
        "id": "183498a90d8989db",
        "type": "mqtt in",
        "z": "8dda81f9590d2155",
        "name": "humid",
        "topic": "/23127354-23127388-23127435/humid",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e4f2654eb37bf1b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 40,
        "wires": [
            [
                "e153e58c21cd6e2d"
            ]
        ]
    },
    {
        "id": "7f763e6fbee537b4",
        "type": "mqtt in",
        "z": "8dda81f9590d2155",
        "name": "temp",
        "topic": "/23127354-23127388-23127435/temp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e4f2654eb37bf1b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 100,
        "wires": [
            [
                "e153e58c21cd6e2d"
            ]
        ]
    },
    {
        "id": "642e27d79af60328",
        "type": "mqtt in",
        "z": "8dda81f9590d2155",
        "name": "pm25",
        "topic": "/23127354-23127388-23127435/pm25",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e4f2654eb37bf1b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 160,
        "wires": [
            [
                "e153e58c21cd6e2d"
            ]
        ]
    },
    {
        "id": "e153e58c21cd6e2d",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Combine sensors",
        "func": "let type;\nlet value = parseFloat(msg.payload);\n\n// Xác định loại dữ liệu từ topic\nif (msg.topic.includes(\"humid\")) {\n    type = \"Humidity\";\n} else if (msg.topic.includes(\"temp\")) {\n    type = \"Temperature\";\n} else if (msg.topic.includes(\"pm25\")) {\n    type = \"PM2_5\";  // Sửa lại PM2.5\n} else if (msg.topic.includes(\"pm10\")) {\n    type = \"PM10\";\n} else {\n    type = \"Unknown\"; // Kiểm tra nếu topic không xác định\n}\n\n// Lưu giá trị vào flow context theo từng loại\nflow.set(type, value);\n\n// Lấy giá trị hiện có từ flow context\nlet humidity = flow.get(\"Humidity\");\nlet temp = flow.get(\"Temperature\");\nlet pm25 = flow.get(\"PM2_5\");\nlet pm10 = flow.get(\"PM10\");\n\n// Chỉ gửi dữ liệu khi đủ cả 4 giá trị\nif (humidity !== undefined && temp !== undefined && pm25 !== undefined && pm10 !== undefined) {\n    // Định dạng dữ liệu cho chart\n    let pmData = [\n        { x: new Date().toISOString(), y: pm25 },\n        { x: new Date().toISOString(), y: pm10 }\n    ];\n\n    let chartData = {\n        series: [\"PM2.5\", \"PM10\"],\n        data: [pmData[0], pmData[1]],\n        labels: [new Date().toISOString()]\n    };\n\n    // Dữ liệu cho các gauge\n    let gaugesData = {\n        PM2_5: pm25,\n        PM10: pm10,\n        Temperature: temp,\n        Humidity: humidity\n    };\n\n    // Trả lại dữ liệu dưới định dạng cho từng output\n    return [\n        { payload: pm25 },  // Output 1: PM2.5 (chỉ gửi giá trị)\n        { payload: pm10 },  // Output 2: PM10 (chỉ gửi giá trị)\n        { payload: temp },  // Output 3: Temperature (chỉ gửi giá trị)\n        { payload: humidity },  // Output 4: Humidity (chỉ gửi giá trị)\n        { payload: chartData },  // Output 5: Dữ liệu cho chart (PM2.5, PM10)\n        { payload: gaugesData }  // Output 6: Gauges data\n    ];\n} else {\n    return null;  // Trả về null nếu thiếu một trong các giá trị cần thiết\n}\n",
        "outputs": 6,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 120,
        "wires": [
            [
                "de8837020ce39d8d",
                "3add253b3797bbb0",
                "d31537a49feaeecd"
            ],
            [
                "79d3217229c8fd0e",
                "2b14b2965865c05d",
                "f51de0e75ea173e4"
            ],
            [
                "406176db8334e4bc"
            ],
            [
                "c8ed9d69caac8110"
            ],
            [],
            [
                "fbd860164a693d11"
            ]
        ]
    },
    {
        "id": "e109d81e20d686fc",
        "type": "ui_chart",
        "z": "8dda81f9590d2155",
        "name": "",
        "group": "176a6dcb963246d5",
        "order": 5,
        "width": 17,
        "height": 8,
        "label": "PM chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#7f4606",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 740,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "f2f6554b27cc1929",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Pull Data",
        "func": "// Function 1: Tạo API URL\nconst channelID = \"3030128\";\nconst readAPI = \"A2AAQJ1EF8O43YAP\";\nconst results = 20; // Số records muốn lấy (có thể thay đổi)\n\nmsg.url = `https://api.thingspeak.com/channels/${channelID}/feeds.json?api_key=${readAPI}&results=${results}`;\nmsg.method = \"GET\";\n\nreturn msg;\n\n// ===================================\n\n// Function 2: Format dữ liệu cho table\nconst feeds = msg.payload.feeds;\nlet tableData = [];\n\nfeeds.forEach(feed => {\n    const timestamp = new Date(feed.created_at);\n    // Format thời gian theo múi giờ Việt Nam\n    const timeString = timestamp.toLocaleTimeString('vi-VN', {\n        hour: '2-digit',\n        minute: '2-digit',\n        timeZone: 'Asia/Ho_Chi_Minh'\n    });\n    \n    // Kiểm tra và format từng field\n    const pm25 = feed.field1 ? parseFloat(feed.field1).toFixed(1) : \"-\";\n    const pm10 = feed.field2 ? parseFloat(feed.field2).toFixed(1) : \"-\";  \n    const humidity = feed.field3 ? parseFloat(feed.field3).toFixed(1) : \"-\";\n    const temperature = feed.field4 ? parseFloat(feed.field4).toFixed(1) : \"-\";\n    \n    tableData.push({\n        \"Time\": timeString,\n        \"PM2.5\": pm25,\n        \"PM10\": pm10,\n        \"Temperature\": temperature,\n        \"Humidity\": humidity\n    });\n});\n\n// Sắp xếp theo thời gian mới nhất trước (reverse)\ntableData.reverse();\n\nmsg.payload = tableData;\nreturn msg;\n\n// ===================================\n\n// Function 3: Auto refresh (cho inject node)\n// Trigger này để tự động lấy dữ liệu mỗi 5 phút\n// Chỉ cần set inject node với interval: 5 minutes\n// Hoặc dùng function này nếu muốn logic phức tạp hơn\n\nconst now = new Date();\nnode.warn(`Refreshing data at: ${now.toLocaleString('vi-VN')}`);\n\n// Gửi trigger để lấy dữ liệu mới\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 560,
        "wires": [
            [
                "f16f8988b2e8b081"
            ]
        ]
    },
    {
        "id": "446d09467bde2f6c",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Avg & Status",
        "func": "// Tính trung bình và đánh giá status\nif (!msg.payload || msg.payload.length === 0) {\n    msg.averages = {};\n    return msg;\n}\n\nconst data = msg.payload;\nlet pm25Sum = 0, pm10Sum = 0, tempSum = 0, humidSum = 0;\nlet count = data.length;\n\ndata.forEach(item => {\n    pm25Sum += parseFloat(item.PM25) || 0;\n    pm10Sum += parseFloat(item.PM10) || 0;\n    tempSum += parseFloat(item.Temperature) || 0;\n    humidSum += parseFloat(item.Humidity) || 0;\n});\n\nconst avgPM25 = (pm25Sum / count).toFixed(1);\nconst avgPM10 = (pm10Sum / count).toFixed(1);\nconst avgTemp = (tempSum / count).toFixed(1);\nconst avgHumid = (humidSum / count).toFixed(0);\n\n// Đánh giá status theo tiêu chuẩn WHO/EPA\nfunction getPM25Status(value) {\n    if (value <= 12) return \"Good\";\n    if (value <= 35.4) return \"Moderate\";\n    if (value <= 55.4) return \"Unhealthy for Sensitive\";\n    if (value <= 150.4) return \"Unhealthy\";\n    if (value <= 250.4) return \"Very Unhealthy\";\n    return \"Hazardous\";\n}\n\nfunction getPM10Status(value) {\n    if (value <= 54) return \"Good\";\n    if (value <= 154) return \"Moderate\";\n    if (value <= 254) return \"Unhealthy for Sensitive\";\n    if (value <= 354) return \"Unhealthy\";\n    if (value <= 424) return \"Very Unhealthy\";\n    return \"Hazardous\";\n}\n\nfunction getTempStatus(value) {\n    if (value >= 18 && value <= 27) return \"Comfortable\";\n    if ((value >= 15 && value < 18) || (value > 27 && value <= 32)) return \"Moderate\";\n    if ((value >= 10 && value < 15) || (value > 32 && value <= 38)) return \"Uncomfortable\";\n    return \"Extreme\";\n}\n\nfunction getHumidityStatus(value) {\n    if (value >= 40 && value <= 60) return \"Comfortable\";\n    if ((value >= 30 && value < 40) || (value > 60 && value <= 70)) return \"Moderate\";\n    if ((value >= 20 && value < 30) || (value > 70 && value <= 80)) return \"Uncomfortable\";\n    return \"Extreme\";\n}\n\nmsg.averages = {\n    pm25: { value: avgPM25, status: getPM25Status(parseFloat(avgPM25)) },\n    pm10: { value: avgPM10, status: getPM10Status(parseFloat(avgPM10)) },\n    temp: { value: avgTemp, status: getTempStatus(parseFloat(avgTemp)) },\n    humidity: { value: avgHumid, status: getHumidityStatus(parseInt(avgHumid)) }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 620,
        "wires": [
            [
                "4caae068883ad8fe"
            ]
        ]
    },
    {
        "id": "4caae068883ad8fe",
        "type": "ui_template",
        "z": "8dda81f9590d2155",
        "group": "9dff1546fd297e8c",
        "name": "Avg4Field",
        "order": 2,
        "width": 10,
        "height": 11,
        "format": "<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        .average-container {\n            padding: 20px;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: #e3f6ff;\n            border-radius: 15px;\n            color: #000;\n            max-width: 700px;\n            margin: 0 auto;\n        }\n\n        .title-row {\n            display: grid;\n            grid-template-columns: 150px 1fr 1fr;\n            margin-bottom: 20px;\n            padding-bottom: 10px;\n            border-bottom: 2px solid rgba(0, 0, 0, 0.1);\n        }\n\n        .title-item:first-child {\n            grid-column: 2;\n            text-align: center;\n        }\n\n        .title-item:last-child {\n            grid-column: 3;\n            text-align: center;\n        }\n\n        .title-item {\n            font-size: 20px;\n            font-weight: bold;\n            text-transform: uppercase;\n            letter-spacing: 1px;\n            color: #000;\n        }\n\n        .metric-row {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 20px;\n            padding: 15px 0;\n            border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n        }\n\n        .metric-row:last-child {\n            border-bottom: none;\n            margin-bottom: 0;\n        }\n\n        .metric-label {\n            font-size: 18px;\n            font-weight: 600;\n            color: #000;\n            min-width: 150px;\n        }\n\n        .metric-value {\n            background: #7bdde4;\n            color: #000;\n            padding: 15px 25px;\n            border-radius: 8px;\n            font-weight: bold;\n            font-size: 16px;\n            min-width: 80px;\n            text-align: center;\n            margin-right: 30px;\n        }\n\n        .metric-status {\n            background: #fbfae2;\n            color: #000;\n            padding: 15px 25px;\n            border-radius: 8px;\n            font-size: 14px;\n            font-weight: 600;\n            min-width: 120px;\n            text-align: center;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"average-container\">\n        <div class=\"title-row\">\n            <div class=\"title-item\">Average</div>\n            <div class=\"title-item\">Status</div>\n        </div>\n\n        <div class=\"metric-row\">\n            <div class=\"metric-label\">PM2.5</div>\n            <div class=\"metric-value\" id=\"pm25-value\">17.5</div>\n            <div class=\"metric-status\" id=\"pm25-status\">Moderate</div>\n        </div>\n\n        <div class=\"metric-row\">\n            <div class=\"metric-label\">PM10</div>\n            <div class=\"metric-value\" id=\"pm10-value\">76.6</div>\n            <div class=\"metric-status\" id=\"pm10-status\">Moderate</div>\n        </div>\n\n        <div class=\"metric-row\">\n            <div class=\"metric-label\">Temp</div>\n            <div class=\"metric-value\" id=\"temp-value\">26.8</div>\n            <div class=\"metric-status\" id=\"temp-status\">Moderate</div>\n        </div>\n\n        <div class=\"metric-row\">\n            <div class=\"metric-label\">Humidity</div>\n            <div class=\"metric-value\" id=\"humid-value\">82</div>\n            <div class=\"metric-status\" id=\"humid-status\">Moderate</div>\n        </div>\n    </div>\n\n    <script>\n        // Sample data update function\n        function updateAverages(data) {\n            if (data && data.averages) {\n                const avg = data.averages;\n                \n                // Update values\n                document.getElementById('pm25-value').textContent = avg.pm25.value;\n                document.getElementById('pm10-value').textContent = avg.pm10.value;\n                document.getElementById('temp-value').textContent = avg.temp.value;\n                document.getElementById('humid-value').textContent = avg.humidity.value;\n                \n                // Update statuses\n                document.getElementById('pm25-status').textContent = avg.pm25.status;\n                document.getElementById('pm10-status').textContent = avg.pm10.status;\n                document.getElementById('temp-status').textContent = avg.temp.status;\n                document.getElementById('humid-status').textContent = avg.humidity.status;\n            }\n        }\n\n        // Demo with sample averages\n        const sampleAverages = {\n            averages: {\n                pm25: { value: \"17.5\", status: \"Moderate\" },\n                pm10: { value: \"76.6\", status: \"Moderate\" },\n                temp: { value: \"26.8\", status: \"Moderate\" },\n                humidity: { value: \"82\", status: \"Moderate\" }\n            }\n        };\n        \n        updateAverages(sampleAverages);\n    </script>\n</body>\n\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "4b3ea0b73f99b7c6",
        "type": "mqtt in",
        "z": "8dda81f9590d2155",
        "name": "pm10",
        "topic": "/23127354-23127388-23127435/pm10",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e4f2654eb37bf1b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 220,
        "wires": [
            [
                "e153e58c21cd6e2d"
            ]
        ]
    },
    {
        "id": "f207f98c36653348",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "alert_noti",
        "func": "// Đảm bảo có label và payload là số\nlet label = msg.label;\nlet value = msg.payload;\n\nif (!label || typeof value !== \"number\") {\n    msg.payload = {\n        alert: \"sai label\",\n    };\n    return msg;  // Bỏ qua nếu không hợp lệ\n}\n\n// Lưu giá trị vào flow context\nflow.set(label, value);\n\n// Lấy lại giá trị từ bộ nhớ\nlet pm25 = flow.get(\"PM2_5\");\nlet pm10 = flow.get(\"PM10\");\n\n// Chỉ xử lý khi đã có đủ cả hai\nif (pm25 === undefined || pm10 === undefined) {\n    msg.payload = {\n        alert: \"Chua du hai du lieu\",\n        PM2_5: pm25,\n        PM10: pm10,\n        timestamp: new Date().toISOString()\n    };\n    return msg;\n}\n\n// đoạn code cho led\nlet statePM25 = pm25 > 35.4 ? 2 : (pm25 > 12 ? 1 : 0);\nlet statePM10 = pm10 > 154 ? 2 : (pm10 > 54 ? 1 : 0);\nlet ledState = (statePM25 === 2 || statePM10 === 2) ? 2\n    : (statePM25 === 1 || statePM10 === 1) ? 1\n        : 0;\n\nflow.set(\"led_state\", ledState);\n// Kiểm tra trạng thái cảnh báo\nlet isAlert = (pm25 > 35.4 || pm10 > 154);\nlet wasAlert = flow.get(\"alert_state\") || false;\n\nif (isAlert && !wasAlert) {\n    flow.set(\"alert_state\", true);\n    msg.payload = \"ALERT\";\n    flow.set(\"PM2_5\", undefined);\n    flow.set(\"PM10\", undefined);\n    return msg;\n} else if (!isAlert && wasAlert) {\n    flow.set(\"alert_state\", false);\n    msg.payload = {\n        alert: \"SAFE\",\n        PM2_5: pm25,\n        PM10: pm10,\n        timestamp: new Date().toISOString()\n    };\n    flow.set(\"PM2_5\", undefined);\n    flow.set(\"PM10\", undefined);\n\n    return msg;\n}\n\n// Không thay đổi trạng thái → không gửi gì\nmsg.payload = {\n    alert: \"no change state\",\n    PM2_5: pm25,\n    PM10: pm10,\n    timestamp: new Date().toISOString()\n};\nflow.set(\"PM2_5\", undefined);\nflow.set(\"PM10\", undefined);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 120,
        "wires": [
            [
                "99f3976e7751c756",
                "7be078fba0f79d9f",
                "6a53661f844c8fd0"
            ]
        ]
    },
    {
        "id": "8d6d3e44a0309b0e",
        "type": "mqtt out",
        "z": "8dda81f9590d2155",
        "name": "",
        "topic": "/23127354-23127388-23127435/alert",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e4f2654eb37bf1b3",
        "x": 1330,
        "y": 180,
        "wires": []
    },
    {
        "id": "99f3976e7751c756",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 220,
        "wires": []
    },
    {
        "id": "3add253b3797bbb0",
        "type": "delay",
        "z": "8dda81f9590d2155",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 560,
        "y": 100,
        "wires": [
            [
                "b7d162385c54da36"
            ]
        ]
    },
    {
        "id": "2b14b2965865c05d",
        "type": "delay",
        "z": "8dda81f9590d2155",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "300a8c9f00f308f2"
            ]
        ]
    },
    {
        "id": "7be078fba0f79d9f",
        "type": "switch",
        "z": "8dda81f9590d2155",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ALERT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1090,
        "y": 180,
        "wires": [
            [
                "8d6d3e44a0309b0e",
                "192794ee93b1afa6"
            ]
        ]
    },
    {
        "id": "b7d162385c54da36",
        "type": "change",
        "z": "8dda81f9590d2155",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "label",
                "pt": "msg",
                "to": "\"PM2_5\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 100,
        "wires": [
            [
                "f207f98c36653348"
            ]
        ]
    },
    {
        "id": "300a8c9f00f308f2",
        "type": "change",
        "z": "8dda81f9590d2155",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "label",
                "pt": "msg",
                "to": "\"PM10\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 140,
        "wires": [
            [
                "f207f98c36653348"
            ]
        ]
    },
    {
        "id": "ecd2af85d099df14",
        "type": "http request",
        "z": "8dda81f9590d2155",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://www.pushsafer.com/api?k=YjI2Bn8CPhain8tNyiql&m={{payload}}&t=CẢNH BÁO CHẤT LƯỢNG KHÔNG KHÍ NGUY HIỂM&s=1&v=1&p=2",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1390,
        "y": 240,
        "wires": [
            [
                "63590243af7e60b2"
            ]
        ]
    },
    {
        "id": "192794ee93b1afa6",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "function 2",
        "func": "// Lấy giá trị PM2_5 và PM10 từ flow context\nlet pm25 = flow.get(\"PM2_5\");\nlet pm10 = flow.get(\"PM10\");\n\n\n// Chuẩn bị payload chỉ chứa dữ liệu\nmsg.payload = `PM2.5: ${pm25 || 0} µgm, PM10: ${pm10 || 0} µgm`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 240,
        "wires": [
            [
                "ecd2af85d099df14"
            ]
        ]
    },
    {
        "id": "63590243af7e60b2",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 240,
        "wires": []
    },
    {
        "id": "d31537a49feaeecd",
        "type": "change",
        "z": "8dda81f9590d2155",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"field1\": payload}",
                "tot": "jsonata",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 180,
        "wires": [
            [
                "9da36023da0b0d40"
            ]
        ]
    },
    {
        "id": "f51de0e75ea173e4",
        "type": "change",
        "z": "8dda81f9590d2155",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"field2\": payload}",
                "tot": "jsonata",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 220,
        "wires": [
            [
                "9da36023da0b0d40"
            ]
        ]
    },
    {
        "id": "406176db8334e4bc",
        "type": "change",
        "z": "8dda81f9590d2155",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"field3\": payload}",
                "tot": "jsonata",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 260,
        "wires": [
            [
                "9da36023da0b0d40"
            ]
        ]
    },
    {
        "id": "c8ed9d69caac8110",
        "type": "change",
        "z": "8dda81f9590d2155",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"field4\": payload}",
                "tot": "jsonata",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 300,
        "wires": [
            [
                "9da36023da0b0d40"
            ]
        ]
    },
    {
        "id": "9da36023da0b0d40",
        "type": "join",
        "z": "8dda81f9590d2155",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "5",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 770,
        "y": 240,
        "wires": [
            [
                "ab340bc0bbd711bc"
            ]
        ]
    },
    {
        "id": "ab340bc0bbd711bc",
        "type": "http request",
        "z": "8dda81f9590d2155",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/update?api_key=WXCJIZN3BFGAPQ1L&field1={{payload.field1}}&field2={{payload.field2}}&field3={{payload.field3}}&field4={{payload.field4}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "405c971bd6f7eaab",
        "type": "json",
        "z": "8dda81f9590d2155",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 410,
        "y": 400,
        "wires": [
            [
                "3d744b0ace9d285b",
                "9ad09c685606dd12",
                "6e50af3812f4b5c4"
            ]
        ]
    },
    {
        "id": "3d744b0ace9d285b",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 440,
        "wires": []
    },
    {
        "id": "9ad09c685606dd12",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "line chart",
        "func": "const feeds = msg.payload.feeds;\n\nlet messages = [];\n\nfeeds.forEach(feed => {\n    const timestamp = new Date(feed.created_at).getTime();\n\n    if (feed.field1 !== null && feed.field1 !== undefined && feed.field1 !== \"\") {\n        messages.push({\n            payload: parseFloat(feed.field1),\n            topic: \"PM2.5\",\n            timestamp: timestamp\n        });\n    }\n\n    if (feed.field2 !== null && feed.field2 !== undefined && feed.field2 !== \"\") {\n        messages.push({\n            payload: parseFloat(feed.field2),\n            topic: \"PM10\",\n            timestamp: timestamp\n        });\n    }\n});\n\nreturn [messages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 400,
        "wires": [
            [
                "e109d81e20d686fc"
            ]
        ]
    },
    {
        "id": "6e50af3812f4b5c4",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "avg",
        "func": "// Lấy dữ liệu feeds từ ThingSpeak\nconst feeds = msg.payload.feeds;\n\n// Kiểm tra dữ liệu đầu vào\nif (!feeds || !Array.isArray(feeds)) {\n    node.error(\"Không có dữ liệu feeds hợp lệ\");\n    return null;\n}\n\nlet pm25Values = [];\nlet pm10Values = [];\n\n// Thu thập tất cả giá trị hợp lệ\nfeeds.forEach(feed => {\n    // Thu thập PM2.5 values\n    if (feed.field1 !== null && feed.field1 !== undefined && feed.field1 !== \"\") {\n        const pm25 = parseFloat(feed.field1);\n        if (!isNaN(pm25)) {\n            pm25Values.push(pm25);\n        }\n    }\n    \n    // Thu thập PM10 values  \n    if (feed.field2 !== null && feed.field2 !== undefined && feed.field2 !== \"\") {\n        const pm10 = parseFloat(feed.field2);\n        if (!isNaN(pm10)) {\n            pm10Values.push(pm10);\n        }\n    }\n});\n\n// Tính trung bình\nlet pm25Avg = 0;\nlet pm10Avg = 0;\n\nif (pm25Values.length > 0) {\n    pm25Avg = pm25Values.reduce((sum, val) => sum + val, 0) / pm25Values.length;\n}\n\nif (pm10Values.length > 0) {\n    pm10Avg = pm10Values.reduce((sum, val) => sum + val, 0) / pm10Values.length;\n}\n\n// Làm tròn đến 1 chữ số thập phân\npm25Avg = Math.round(pm25Avg * 10) / 10;\npm10Avg = Math.round(pm10Avg * 10) / 10;\n\n// Tạo payload cho Template node (chỉ 1 output)\nmsg.payload = {\n    pm25_avg: pm25Avg,\n    pm10_avg: pm10Avg,\n    pm25_count: pm25Values.length,\n    pm10_count: pm10Values.length\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 480,
        "wires": [
            [
                "f7f761f4f58f2f28"
            ]
        ]
    },
    {
        "id": "f7f761f4f58f2f28",
        "type": "ui_template",
        "z": "8dda81f9590d2155",
        "group": "176a6dcb963246d5",
        "name": "PM Avg",
        "order": 4,
        "width": 8,
        "height": 4,
        "format": "<div\n    style=\"background-color: #e2e8f0; padding: 20px; border-radius: 12px; text-align: left; font-family: Arial, sans-serif; width: 100%; margin: 0; box-sizing: border-box;\">\n    <h2 style=\"margin: 0 0 25px 0; font-size: 22px; font-weight: bold; text-align: center; color: #1a202c;\">Average</h2>\n\n    <div style=\"margin-bottom: 20px;\">\n        <div style=\"display: flex; align-items: center; justify-content: space-between;\">\n            <span style=\"font-size: 18px; font-weight: bold; color: #2d3748;\">PM2.5</span>\n            <div\n                style=\"background-color: #81e6d9; color: #1a202c; padding: 12px 24px; border-radius: 8px; font-size: 16px; font-weight: bold; min-width: 60px; text-align: center;\">\n                {{msg.payload.pm25_avg}}\n            </div>\n        </div>\n    </div>\n\n    <div>\n        <div style=\"display: flex; align-items: center; justify-content: space-between;\">\n            <span style=\"font-size: 18px; font-weight: bold; color: #2d3748;\">PM10</span>\n            <div\n                style=\"background-color: #81e6d9; color: #1a202c; padding: 12px 24px; border-radius: 8px; font-size: 16px; font-weight: bold; min-width: 60px; text-align: center;\">\n                {{msg.payload.pm10_avg}}\n            </div>\n        </div>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 740,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "fbd860164a693d11",
        "type": "ui_template",
        "z": "8dda81f9590d2155",
        "group": "176a6dcb963246d5",
        "name": "temp/humid",
        "order": 3,
        "width": 8,
        "height": 4,
        "format": "<!-- Template cho Node-RED Template node -->\n<style>\n    .sensor-container {\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n        font-family: Arial, sans-serif;\n        padding: 10px;\n    }\n\n    .sensor-card {\n        background-color: #e3f2fd;\n        border-radius: 12px;\n        padding: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        min-width: 200px;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-value {\n        font-size: 32px;\n        font-weight: bold;\n        color: #1a1a1a;\n    }\n\n    .sensor-icon {\n        font-size: 28px;\n        color: #333;\n    }\n\n    /* Icon styles sử dụng Unicode symbols */\n    .humidity-icon::before {\n        content: \"💧\";\n    }\n\n    .temperature-icon::before {\n        content: \"🌡️\";\n    }\n</style>\n\n<div class=\"sensor-container\">\n    <!-- Độ ẩm -->\n    <div class=\"sensor-card\">\n        <span class=\"sensor-value\">{{msg.payload.Humidity}}%</span>\n        <span class=\"sensor-icon humidity-icon\"></span>\n    </div>\n\n    <!-- Nhiệt độ -->\n    <div class=\"sensor-card\">\n        <span class=\"sensor-value\">{{msg.payload.Temperature}}°C</span>\n        <span class=\"sensor-icon temperature-icon\"></span>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 550,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "edc007e33a9b3822",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "formatTable",
        "func": "if (!msg.payload || !msg.payload.feeds) {\n    msg.payload = [];\n    return msg;\n}\n\nconst feeds = msg.payload.feeds;\nlet tableData = [];\n\nfeeds.forEach(feed => {\n    const timestamp = new Date(feed.created_at);\n    const timeString = timestamp.toLocaleString('vi-VN', {\n        day: '2-digit',\n        month: '2-digit', \n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        timeZone: 'Asia/Ho_Chi_Minh'\n    });\n\n    tableData.push({\n        \"Time\": timeString,\n        \"PM25\": feed.field1,  // Thay đổi key thành \"PM25\"\n        \"PM10\": feed.field2,\n        \"Temperature\": feed.field3,\n        \"Humidity\": feed.field4\n    });\n});\n\ntableData.reverse();\nmsg.payload = tableData;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 560,
        "wires": [
            [
                "4329c0cbc283729c",
                "446d09467bde2f6c"
            ]
        ]
    },
    {
        "id": "4329c0cbc283729c",
        "type": "ui_table",
        "z": "8dda81f9590d2155",
        "group": "9dff1546fd297e8c",
        "name": "",
        "order": 1,
        "width": 16,
        "height": 11,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 730,
        "y": 560,
        "wires": []
    },
    {
        "id": "a8c76196ccb5a45e",
        "type": "inject",
        "z": "8dda81f9590d2155",
        "name": "Auto Update Every 5 Min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1000,
        "wires": [
            [
                "ec47e4cab21a4d57"
            ]
        ]
    },
    {
        "id": "ec47e4cab21a4d57",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Prepare API Request",
        "func": "// CÁCH MỚI - Không dùng msg.url nữa\n// Chỉ chuẩn bị dữ liệu để xử lý\n\nmsg.payload = {\n    action: \"getData\",\n    timestamp: new Date().toISOString()\n};\n\n// Log để debug\nnode.log(\"Preparing to fetch ThingSpeak data\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1000,
        "wires": [
            [
                "4d236477cfa97edb"
            ]
        ]
    },
    {
        "id": "4d236477cfa97edb",
        "type": "http request",
        "z": "8dda81f9590d2155",
        "name": "Get ThingSpeak Data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/3030128/feeds.json?api_key=A2AAQJ1EF8O43YAP&results=10",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 1000,
        "wires": [
            [
                "51fdd9b4e6655bd8",
                "1eea2d8e4e444b1d"
            ]
        ]
    },
    {
        "id": "51fdd9b4e6655bd8",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Store Data in Context",
        "func": "// Lấy dữ liệu từ ThingSpeak response\nvar data = msg.payload;\n\nif (data && data.feeds && data.feeds.length > 0) {\n    // Lấy dữ liệu mới nhất\n    var latestData = data.feeds[data.feeds.length - 1];\n    \n    // Tạo object dữ liệu\n    var sensorData = {\n        pm25: parseFloat(latestData.field1) || 0,\n        pm10: parseFloat(latestData.field2) || 0, \n        temp: parseFloat(latestData.field3) || 0,\n        hum: parseFloat(latestData.field4) || 0,\n        timestamp: latestData.created_at,\n        allFeeds: data.feeds,\n        lastUpdate: new Date().toISOString()\n    };\n    \n    // ✅ SỬA: Dùng GLOBAL context thay vì flow context\n    global.set(\"latestSensorData\", sensorData);\n    \n    // Log thông tin\n    node.log(\"✅ Updated GLOBAL sensor data: PM2.5=\" + sensorData.pm25 + \n             \", PM10=\" + sensorData.pm10 + \n             \", Temp=\" + sensorData.temp + \n             \", Hum=\" + sensorData.hum);\n    \n    msg.payload = sensorData;\n} else {\n    msg.payload = {error: \"No data received from ThingSpeak\"};\n    node.log(\"❌ No data from ThingSpeak API\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1040,
        "wires": [
            [
                "f0b03dc9eb9675df"
            ]
        ]
    },
    {
        "id": "f0b03dc9eb9675df",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "Data Update Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1040,
        "wires": []
    },
    {
        "id": "260d532d7a206a88",
        "type": "ui_text_input",
        "z": "8dda81f9590d2155",
        "name": "Question Input",
        "label": "Hỏi về chất lượng không khí",
        "tooltip": "",
        "group": "176a6dcb963246d5",
        "order": 16,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "user_question",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 100,
        "y": 1100,
        "wires": [
            [
                "9bbcc7c6eb44bd57"
            ]
        ]
    },
    {
        "id": "9bbcc7c6eb44bd57",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Process User Question",
        "func": "//context.set(\"currentQuestion\", msg.payload);\n// Lấy câu hỏi từ user\nvar userQuestion = msg.payload;\nmsg.original_question = userQuestion;\n\n// Đọc từ GLOBAL context\nvar sensorData = global.get(\"latestSensorData\");\n\n// Kiểm tra dữ liệu\nif (!sensorData) {\n    msg.payload = \"Chưa có dữ liệu cảm biến. Hệ thống đang cập nhật dữ liệu mỗi 5 phút. Vui lòng chờ ít phút và thử lại.\";\n    return msg;\n}\n\n// Kiểm tra độ fresh của data - SỬA CÁCH TÍNH\nvar currentTime = new Date();\nvar lastUpdateTime = new Date(sensorData.lastUpdate);\nvar dataAge = currentTime.getTime() - lastUpdateTime.getTime();\nvar ageMinutes = Math.floor(dataAge / (1000 * 60));\n\n// Kiểm tra data không quá cũ\nif (ageMinutes > 15) {\n    msg.payload = \"Dữ liệu đã cũ \" + ageMinutes + \" phút. Đang chờ cập nhật mới...\";\n    return msg;\n}\n\n// Tạo prompt cho AI\nvar prompt = \"Bạn là chuyên gia phân tích chất lượng không khí IoT.\\n\\n\";\nprompt += \"DỮLIỆU HIỆN TẠI (cập nhật \" + ageMinutes + \" phút trước):\\n\";\nprompt += \"• PM2.5: \" + sensorData.pm25 + \" µg/m³\\n\";\nprompt += \"• PM10: \" + sensorData.pm10 + \" µg/m³\\n\";\nprompt += \"• Nhiệt độ: \" + sensorData.temp + \"°C\\n\";\nprompt += \"• Độ ẩm: \" + sensorData.hum + \"%\\n\";\nprompt += \"• Thời gian: \" + sensorData.timestamp + \"\\n\\n\";\n\nprompt += \"TIÊU CHUẨN WHO:\\n\";\nprompt += \"PM2.5: <15 (tốt) | 15-25 (trung bình) | 25-37 (kém) | >37 (nguy hiểm)\\n\";\nprompt += \"PM10: <45 (tốt) | 45-75 (trung bình) | 75-150 (kém) | >150 (nguy hiểm)\\n\\n\";\n\nprompt += \"CÂU HỎI: \" + userQuestion + \"\\n\\n\";\nprompt += \"YÊU CÀU: Phân tích dữ liệu, đánh giá mức độ và đưa khuyến nghị cụ thể. Trả lời ngắn gọn bằng tiếng Việt.\";\n\n// Chuẩn bị cho Gemini\nmsg.payload = {\n    contents: [{\n        parts: [{\n            text: prompt\n        }]\n    }],\n    generationConfig: {\n        temperature: 0.2,\n        maxOutputTokens: 400\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1100,
        "wires": [
            [
                "c16156d868d08717"
            ]
        ]
    },
    {
        "id": "c16156d868d08717",
        "type": "http request",
        "z": "8dda81f9590d2155",
        "name": "Call Gemini AI",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyC1LGnNDjeNh0EbdkJdN-XAWGd05Lj97vQ",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 540,
        "y": 1100,
        "wires": [
            [
                "a7a0def74c55c1f1",
                "b8cec350e3f7544d"
            ]
        ]
    },
    {
        "id": "a7a0def74c55c1f1",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Format AI Response",
        "func": "try {\n    var response = msg.payload;\n    \n    if (response && response.candidates && response.candidates[0]) {\n        var aiResponse = response.candidates[0].content.parts[0].text;\n        \n        // Format response với timestamp\n        var formattedResponse = `🤖 **Phân tích chất lượng không khí:**\\n\\n${aiResponse}\\n\\n⏰ *Cập nhật: ${new Date().toLocaleString('vi-VN')}*`;\n        \n        msg.payload = formattedResponse;\n    } else {\n        msg.payload = \"❌ Xin lỗi không thể phân tích dữ liệu lúc này. Vui lòng thử lại sau.\";\n    }\n} catch (error) {\n    msg.payload = \"❌ Có lỗi xảy ra: \" + error.message;\n    node.error(\"AI Response Error: \" + error.message);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1100,
        "wires": [
            [
                "95568a0ed224cf5d"
            ]
        ]
    },
    {
        "id": "95568a0ed224cf5d",
        "type": "ui_text",
        "z": "8dda81f9590d2155",
        "group": "176a6dcb963246d5",
        "order": 19,
        "width": 10,
        "height": 4,
        "name": "",
        "label": "Câu trả lời",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 970,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b8cec350e3f7544d",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "Chatbot Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1140,
        "wires": []
    },
    {
        "id": "1eea2d8e4e444b1d",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "debug global data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1000,
        "wires": []
    },
    {
        "id": "fbd95ce49fa0b82d",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 620,
        "wires": []
    },
    {
        "id": "9bcad8a01870c450",
        "type": "http request",
        "z": "8dda81f9590d2155",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/3030128/feeds.json?api_key=A2AAQJ1EF8O43YAP&results=1000",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 250,
        "y": 400,
        "wires": [
            [
                "405c971bd6f7eaab"
            ]
        ]
    },
    {
        "id": "16452679de2af54f",
        "type": "inject",
        "z": "8dda81f9590d2155",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 400,
        "wires": [
            [
                "9bcad8a01870c450"
            ]
        ]
    },
    {
        "id": "f16f8988b2e8b081",
        "type": "http request",
        "z": "8dda81f9590d2155",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{url}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 560,
        "wires": [
            [
                "fbd95ce49fa0b82d",
                "edc007e33a9b3822"
            ]
        ]
    },
    {
        "id": "c1ebc95d8a87b93a",
        "type": "inject",
        "z": "8dda81f9590d2155",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 560,
        "wires": [
            [
                "f2f6554b27cc1929"
            ]
        ]
    },
    {
        "id": "3e80c1dc21823216",
        "type": "inject",
        "z": "8dda81f9590d2155",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 1200,
        "wires": [
            [
                "3ddbfc985e6ff514"
            ]
        ]
    },
    {
        "id": "3ddbfc985e6ff514",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Alert Checker",
        "func": "// ==== LẤY & KIỂM TRA DỮ LIỆU ==== //\nconst toNum = v => (v === undefined ? undefined : Number(v));\n\nlet humidity = toNum(flow.get(\"Humidity\"));\nlet temp = toNum(flow.get(\"Temperature\"));\nlet pm25 = toNum(flow.get(\"PM2_5\"));\nlet pm10 = toNum(flow.get(\"PM10\"));\n\nif ([humidity, temp, pm25, pm10].some(v => v === undefined || Number.isNaN(v))) {\n    node.status({ fill: \"yellow\", shape: \"ring\", text: \"Chưa đủ/không hợp lệ dữ liệu\" });\n    return null;\n}\n\n// ==== NGƯỠNG CẢNH BÁO ==== //\nconst THRESHOLDS = {\n    PM2_5: 35,       // μg/m³\n    PM10: 50,        // μg/m³\n    Temperature: 35, // °C\n    Humidity: 80     // %\n};\n\n// ==== KIỂM TRA VƯỢT NGƯỠNG (KHÔNG CÓ COOLDOWN) ==== //\nlet alerts = [];\n\n// PM2.5\nif (pm25 > THRESHOLDS.PM2_5) {\n    alerts.push({\n        type: \"PM2.5\",\n        value: pm25,\n        threshold: THRESHOLDS.PM2_5,\n        severity: pm25 > 75 ? \"NGHIÊM TRỌNG\" : \"CẢNH BÁO\",\n        icon: \"🔴\",\n        message: `PM2.5 vượt ngưỡng an toàn: ${pm25} μg/m³ (An toàn: < ${THRESHOLDS.PM2_5} μg/m³)`\n    });\n}\n\n// PM10\nif (pm10 > THRESHOLDS.PM10) {\n    alerts.push({\n        type: \"PM10\",\n        value: pm10,\n        threshold: THRESHOLDS.PM10,\n        severity: pm10 > 100 ? \"NGHIÊM TRỌNG\" : \"CẢNH BÁO\",\n        icon: \"🔴\",\n        message: `PM10 vượt ngưỡng an toàn: ${pm10} μg/m³ (An toàn: < ${THRESHOLDS.PM10} μg/m³)`\n    });\n}\n\n// Nhiệt độ\nif (temp > THRESHOLDS.Temperature) {\n    alerts.push({\n        type: \"Nhiệt độ\",\n        value: temp,\n        threshold: THRESHOLDS.Temperature,\n        severity: temp > 40 ? \"NGHIÊM TRỌNG\" : \"CẢNH BÁO\",\n        icon: \"🌡️\",\n        message: `Nhiệt độ quá cao: ${temp}°C (An toàn: < ${THRESHOLDS.Temperature}°C)`\n    });\n}\n\n// Độ ẩm\nif (humidity > THRESHOLDS.Humidity) {\n    alerts.push({\n        type: \"Độ ẩm\",\n        value: humidity,\n        threshold: THRESHOLDS.Humidity,\n        severity: humidity > 90 ? \"NGHIÊM TRỌNG\" : \"CẢNH BÁO\",\n        icon: \"💧\",\n        message: `Độ ẩm quá cao: ${humidity}% (An toàn: < ${THRESHOLDS.Humidity}%)`\n    });\n}\n\n// ==== KHÔNG VƯỢT NGƯỠNG -> KHÔNG GỬI ==== //\nif (alerts.length === 0) {\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Tất cả thông số bình thường\" });\n    return null;\n}\n\n// ==== BUILD TEXT/EMAIL ==== //\nconst textLines = alerts.map(a => `${a.icon} [${a.severity}] ${a.type}: ${a.message}`);\nconst text = [\n    \"CẢNH BÁO MÔI TRƯỜNG\",\n    `Thời điểm: ${new Date().toLocaleString()}`,\n    `Vị trí: Phòng giám sát IoT`,\n    \"\",\n    ...textLines,\n    \"\",\n    \"Giá trị hiện tại:\",\n    `• PM2.5: ${pm25} μg/m³`,\n    `• PM10 : ${pm10} μg/m³`,\n    `• Nhiệt độ: ${temp} °C`,\n    `• Độ ẩm : ${humidity} %`\n].join(\"\\n\");\n\nnode.status({ fill: \"red\", shape: \"dot\", text: `${alerts.length} cảnh báo` });\n\n// Nếu email node của bạn dùng msg.payload là text:\nmsg.topic = \"[IoT] Cảnh báo môi trường\";\nmsg.payload = text;\n\n// Nếu phía sau bạn cần thêm JSON cho node khác:\nmsg.details = {\n    alerts,\n    timestamp: new Date().toISOString(),\n    location: \"Phòng giám sát IoT\",\n    allValues: { pm25, pm10, temperature: temp, humidity }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1200,
        "wires": [
            [
                "8dd665926ed9468d"
            ]
        ]
    },
    {
        "id": "8dd665926ed9468d",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Firebase Request",
        "func": "let alertData = msg.payload;\n\n// Firebase Realtime Database URL\nlet firebaseUrl = \"https://iot-user-4e30c-default-rtdb.asia-southeast1.firebasedatabase.app/emails.json\";\n\n// Chuẩn bị HTTP request\nmsg.url = firebaseUrl;\nmsg.method = \"GET\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\n// Lưu alert data để sử dụng ở node tiếp theo\nmsg.alertData = alertData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1200,
        "wires": [
            [
                "146b86f1b0fb3bde"
            ]
        ]
    },
    {
        "id": "146b86f1b0fb3bde",
        "type": "http request",
        "z": "8dda81f9590d2155",
        "name": "Get Emails",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 1200,
        "wires": [
            [
                "873a200cadefafda"
            ]
        ]
    },
    {
        "id": "873a200cadefafda",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Build Email",
        "func": "// ===== 1) Gom email như bạn đang làm =====\nconst data = msg.payload;\nconst reEmail = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/i;\n\nconst found = new Set();\n(function collect(v){\n  if (!v) return;\n  if (typeof v === \"string\") { const s=v.trim(); if (reEmail.test(s)) found.add(s); return; }\n  if (Array.isArray(v)) { v.forEach(collect); return; }\n  if (typeof v === \"object\") {\n    if (typeof v.email === \"string\" && reEmail.test(v.email.trim())) found.add(v.email.trim());\n    Object.values(v).forEach(collect);\n  }\n})(data);\n\nconst emails = [...found];\nif (!emails.length) { node.status({fill:\"yellow\",shape:\"ring\",text:\"Không tìm thấy email\"}); return null; }\n\n// ===== 2) Build nội dung từ msg.alertData (string hoặc object) =====\nconst ad = msg.alertData || {};\nlet textContent = \"\";\nlet htmlContent = undefined;\n\nif (typeof ad === \"string\") {\n  textContent = ad; // đã là text sẵn\n} else {\n  const alerts = Array.isArray(ad.alerts) ? ad.alerts : [];\n  const ts  = new Date(ad.timestamp || Date.now());\n  const loc = ad.location || \"N/A\";\n  const vals = ad.allValues || {};\n  const pm25 = vals.pm25 ?? \"—\";\n  const pm10 = vals.pm10 ?? \"—\";\n  const temp = vals.temperature ?? \"—\";\n  const hum  = vals.humidity ?? \"—\";\n\n  const lines = alerts.length\n    ? alerts.map(a => `${a.icon || \"\"} [${a.severity || \"\"}] ${a.message || \"\"}`).join(\"\\n\")\n    : \"(không có chi tiết)\";\n\n  textContent =\n`🚨 CẢNH BÁO CHẤT LƯỢNG KHÔNG KHÍ\n📍 Vị trí: ${loc}\n🕐 Thời gian: ${ts.toLocaleString('vi-VN')}\n\n${lines}\n\n📊 TẤT CẢ THÔNG SỐ HIỆN TẠI:\n• PM2.5: ${pm25} μg/m³\n• PM10 : ${pm10} μg/m³\n• Nhiệt độ: ${temp} °C\n• Độ ẩm : ${hum} %`;\n\n  htmlContent = `<!DOCTYPE html><html lang=\"vi\"><head>\n<meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n<title>Cảnh báo môi trường</title>\n<style>\n body{font-family:Arial,Helvetica,sans-serif;background:#f5f7fb;margin:0;padding:20px;color:#222}\n .card{max-width:680px;margin:0 auto;background:#fff;border-radius:12px;overflow:hidden;box-shadow:0 8px 24px rgba(0,0,0,.08)}\n .hdr{background:linear-gradient(135deg,#ff6b6b,#ff5252);color:#fff;padding:20px}\n .hdr h1{margin:0 0 4px 0;font-size:22px}\n .meta{opacity:.95;font-size:14px}\n .sec{padding:20px}\n .sec h2{margin:0 0 10px 0;font-size:18px}\n .alert{border-left:4px solid #ffc107;background:#fff3cd;padding:12px 14px;border-radius:8px;margin:10px 0}\n .alert.crit{border-left-color:#dc3545;background:#f8d7da}\n table{width:100%;border-collapse:collapse;margin-top:14px}\n th,td{border:1px solid #e9ecef;padding:10px;text-align:left;font-size:14px}\n th{background:#f8f9fa}\n .ok{color:#28a745;font-weight:600}.warn{color:#ffc107;font-weight:600}.crit{color:#dc3545;font-weight:600}\n .footer{background:#f8f9fa;color:#666;font-size:12px;padding:12px 16px;text-align:center}\n</style></head><body>\n<div class=\"card\">\n  <div class=\"hdr\">\n    <h1>🚨 CẢNH BÁO CHẤT LƯỢNG KHÔNG KHÍ</h1>\n    <div class=\"meta\">📍 ${loc} • 🕐 ${ts.toLocaleString('vi-VN')}</div>\n  </div>\n  <div class=\"sec\">\n    <h2>⚠️ Chi tiết cảnh báo</h2>\n    ${alerts.map(a => `\n      <div class=\"alert ${a.severity === 'NGHIÊM TRỌNG' ? 'crit' : ''}\">\n        <strong>${a.icon || \"\"} ${a.type || \"\"} — ${a.severity || \"\"}</strong><br/>\n        ${a.message || \"\"}\n      </div>`).join('') || '<div class=\"alert\">Không có chi tiết</div>'}\n  </div>\n  <div class=\"sec\">\n    <h2>📊 Thông số hiện tại</h2>\n    <table role=\"presentation\">\n      <tr><th>Thông số</th><th>Giá trị</th><th>Ngưỡng</th><th>Trạng thái</th></tr>\n      <tr><td>PM2.5</td><td>${pm25} μg/m³</td><td>&lt; 35</td><td class=\"${Number(pm25)>35?'crit':'ok'}\">${Number(pm25)>35?'❌ Vượt ngưỡng':'✅ Bình thường'}</td></tr>\n      <tr><td>PM10</td><td>${pm10} μg/m³</td><td>&lt; 50</td><td class=\"${Number(pm10)>50?'crit':'ok'}\">${Number(pm10)>50?'❌ Vượt ngưỡng':'✅ Bình thường'}</td></tr>\n      <tr><td>Nhiệt độ</td><td>${temp} °C</td><td>&lt; 35</td><td class=\"${Number(temp)>35?'crit':'ok'}\">${Number(temp)>35?'❌ Quá nóng':'✅ Bình thường'}</td></tr>\n      <tr><td>Độ ẩm</td><td>${hum} %</td><td>&lt; 80%</td><td class=\"${Number(hum)>80?'warn':'ok'}\">${Number(hum)>80?'⚠️ Quá ẩm':'✅ Bình thường'}</td></tr>\n    </table>\n  </div>\n  <div class=\"footer\">Hệ thống giám sát IoT • Email tự động • Gửi lúc ${new Date().toLocaleString('vi-VN')}</div>\n</div>\n</body></html>`;\n}\n\n// ===== 3) DỌN RÁC TRƯỚC KHI GỬI QUA EMAIL NODE =====\n// Xoá các header/cờ có thể khiến nodemailer set sai Content-Type\ndelete msg.headers;        // <- QUAN TRỌNG: bạn đã set ở bước HTTP là application/json\ndelete msg.attachments;\ndelete msg.filename;\ndelete msg.contentType;\ndelete msg.encoding;\n\n// ===== 4) Gán trường cho Email node =====\nmsg.to     = emails.join(\", \");                 // để trống ô \"To\" trong Email node\nmsg.topic  = \"[IoT] Cảnh báo môi trường\";      // subject\nmsg.payload = String(textContent || \"\");        // PLAIN TEXT (bắt buộc là chuỗi)\nif (htmlContent) msg.html = htmlContent;       // HTML body (tuỳ chọn)\n\nnode.status({fill:\"green\", shape:\"dot\", text:`Sẽ gửi tới ${emails.length} email`});\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1200,
        "wires": [
            [
                "89380bec815c46cc"
            ]
        ]
    },
    {
        "id": "c65341a3a088ec63",
        "type": "mqtt in",
        "z": "8dda81f9590d2155",
        "name": "gas-alert",
        "topic": "/23127354-23127388-23127435/gas-alert",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e4f2654eb37bf1b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 1320,
        "wires": [
            [
                "9899a83ac5a96007",
                "cddc751c7c7f8df2"
            ]
        ]
    },
    {
        "id": "9899a83ac5a96007",
        "type": "http request",
        "z": "8dda81f9590d2155",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://www.pushsafer.com/api?k=YjI2Bn8CPhain8tNyiql&m=Dangerous%20Gas%20Levels!&t=NGƯỠNG%20GA%20NGUY%20HIỂM&s=1&v=1&p=2",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "6a53661f844c8fd0",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "LED",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            [
                "d7858ba8affd2ac6"
            ]
        ]
    },
    {
        "id": "d7858ba8affd2ac6",
        "type": "change",
        "z": "8dda81f9590d2155",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "led_state",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 40,
        "wires": [
            [
                "50a7a5be8d4510b2",
                "3ce679e584ca3e06"
            ]
        ]
    },
    {
        "id": "50a7a5be8d4510b2",
        "type": "switch",
        "z": "8dda81f9590d2155",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "0",
                "vt": "num",
                "v2": "2",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1290,
        "y": 40,
        "wires": [
            [
                "4919cb95e162d1d1"
            ]
        ]
    },
    {
        "id": "3ce679e584ca3e06",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 80,
        "wires": []
    },
    {
        "id": "4919cb95e162d1d1",
        "type": "rbe",
        "z": "8dda81f9590d2155",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1450,
        "y": 40,
        "wires": [
            [
                "848f8aed47629c60"
            ]
        ]
    },
    {
        "id": "848f8aed47629c60",
        "type": "mqtt out",
        "z": "8dda81f9590d2155",
        "name": "",
        "topic": "/23127354-23127388-23127435/led",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e4f2654eb37bf1b3",
        "x": 1710,
        "y": 40,
        "wires": []
    },
    {
        "id": "cddc751c7c7f8df2",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 1280,
        "wires": []
    },
    {
        "id": "89380bec815c46cc",
        "type": "e-mail",
        "z": "8dda81f9590d2155",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 930,
        "y": 1200,
        "wires": []
    },
    {
        "id": "42f66758e1ad013f",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Save Original Password",
        "func": "var username = msg.payload.username;\nmsg.original_password = msg.payload.password; // Lưu pass gốc để so sánh\nmsg.method = \"GET\";\nmsg.url = \"https://iot-user-4e30c-default-rtdb.asia-southeast1.firebasedatabase.app/users/\" + username + \".json\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 860,
        "wires": [
            [
                "ff12c97b0f91972b",
                "555db779d5773ca3"
            ]
        ]
    },
    {
        "id": "ff12c97b0f91972b",
        "type": "http request",
        "z": "8dda81f9590d2155",
        "name": "Get User Data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 580,
        "y": 860,
        "wires": [
            [
                "5afb30257fd52bd2",
                "202cbd29b9fb33a0"
            ]
        ]
    },
    {
        "id": "555db779d5773ca3",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 900,
        "wires": []
    },
    {
        "id": "f5280fbcd6ece44a",
        "type": "ui_form",
        "z": "8dda81f9590d2155",
        "name": "Login Form",
        "label": "",
        "group": "ui_grp_register",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 130,
        "y": 860,
        "wires": [
            [
                "42f66758e1ad013f",
                "b901d10abbb18f48"
            ]
        ]
    },
    {
        "id": "b901d10abbb18f48",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 900,
        "wires": []
    },
    {
        "id": "7309939261f58be5",
        "type": "switch",
        "z": "8dda81f9590d2155",
        "name": "",
        "property": "msg.payload.loggedIn",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 920,
        "wires": [
            [
                "7ef2aafec0857f71",
                "9e89bcf308c5169f"
            ],
            [
                "f5280fbcd6ece44a"
            ]
        ]
    },
    {
        "id": "a39c09c98a868d1d",
        "type": "ui_ui_control",
        "z": "8dda81f9590d2155",
        "name": "Home",
        "events": "all",
        "x": 1190,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "7ef2aafec0857f71",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Go to Home",
        "func": "msg.payload = { tab: \"Home\", enabled: true }; // Thay \"Home\" bằng tab bạn muốn hiển thị\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 940,
        "wires": [
            [
                "a39c09c98a868d1d"
            ]
        ]
    },
    {
        "id": "ece3d511f9ac706c",
        "type": "ui_text",
        "z": "8dda81f9590d2155",
        "group": "ui_grp_register",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload.status}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1150,
        "y": 840,
        "wires": []
    },
    {
        "id": "5afb30257fd52bd2",
        "type": "debug",
        "z": "8dda81f9590d2155",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 820,
        "wires": []
    },
    {
        "id": "712976a0e9351b90",
        "type": "ui_form",
        "z": "8dda81f9590d2155",
        "name": "Register Form",
        "label": "",
        "group": "8c9655c44e9a8648",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Confirm",
                "value": "confirm",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": "",
            "confirm": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "register",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 140,
        "y": 680,
        "wires": [
            [
                "8fe169900798833e"
            ]
        ]
    },
    {
        "id": "8fe169900798833e",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Validate input",
        "func": "const {username, password, confirm} = msg.payload || {};\nif(!username || !password || !confirm){ node.error(\"Missing fields\"); return null; }\nif(password !== confirm){ node.error(\"Password mismatch\"); return null; }\nif(password.length < 4){ node.error(\"Weak password\"); return null; }\nmsg.username = username;\nmsg._pw = password;\n// Build GET to check exists\nmsg.method = \"GET\";\nmsg.url = `https://iot-user-4e30c-default-rtdb.asia-southeast1.firebasedatabase.app/users/${encodeURIComponent(username)}.json`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 740,
        "wires": [
            [
                "1bcc06a8f054f73e"
            ]
        ]
    },
    {
        "id": "1bcc06a8f054f73e",
        "type": "http request",
        "z": "8dda81f9590d2155",
        "name": "GET user",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 740,
        "wires": [
            [
                "094bc6242f701ac6"
            ]
        ]
    },
    {
        "id": "094bc6242f701ac6",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "User exists?",
        "func": "// if payload is null => free to create\nif(msg.payload === null){ return [msg, null]; }\nmsg.payload = { status: \"❌ Username taken\" };\nreturn [null, msg];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 740,
        "wires": [
            [
                "fdddfcccdcfb1c9f"
            ],
            [
                "2a2a3ffaa364dfde"
            ]
        ]
    },
    {
        "id": "fdddfcccdcfb1c9f",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Hash password + PUT",
        "func": "// expect: msg.username, msg._pw\nif (!msg.username || !msg._pw) { node.error(\"Missing fields\"); return null; }\n\nconst salt = crypto.randomBytes(16);\nconst iter = 120000;\nconst algo = \"sha256\";\nconst klen = 32;\n\nconst hash = crypto.pbkdf2Sync(msg._pw, salt, iter, klen, algo);\nconst stored = `pbkdf2$${algo}$${iter}$${salt.toString(\"base64\")}$${hash.toString(\"base64\")}`;\n\nmsg.method = \"PUT\";\nmsg.headers = { \"Content-Type\": \"application/json\" };\nmsg.url = `https://iot-user-4e30c-default-rtdb.asia-southeast1.firebasedatabase.app/users/${encodeURIComponent(msg.username)}.json`;\nmsg.payload = { password: stored };\ndelete msg._pw;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 920,
        "y": 720,
        "wires": [
            [
                "ae189f63b88f3e9e"
            ]
        ]
    },
    {
        "id": "ae189f63b88f3e9e",
        "type": "http request",
        "z": "8dda81f9590d2155",
        "name": "PUT user",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1120,
        "y": 720,
        "wires": [
            [
                "be71584ac0bff22c"
            ]
        ]
    },
    {
        "id": "be71584ac0bff22c",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Done",
        "func": "if(msg.statusCode && msg.statusCode >= 200 && msg.statusCode < 300){\n  msg.payload = { status: '✅ Registered', username: msg.username };\n  return [msg, null];\n}\nmsg.payload = { status: '❌ Register failed', code: msg.statusCode };\nreturn [null, msg];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 720,
        "wires": [
            [
                "2a2a3ffaa364dfde",
                "6915c5ee8e126ba3"
            ],
            [
                "712976a0e9351b90",
                "2a2a3ffaa364dfde"
            ]
        ]
    },
    {
        "id": "b11b0a12bbd67324",
        "type": "ui_button",
        "z": "8dda81f9590d2155",
        "name": "",
        "group": "ui_grp_register",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Sign up",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 800,
        "wires": [
            [
                "10655124140a41f0"
            ]
        ]
    },
    {
        "id": "10655124140a41f0",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Go to Register",
        "func": "msg.payload = { tab: \"Register\", enabled: true }; // Thay \"Home\" bằng tab bạn muốn hiển thị\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 800,
        "wires": [
            [
                "4dd2a148e383d8a3"
            ]
        ]
    },
    {
        "id": "4dd2a148e383d8a3",
        "type": "ui_ui_control",
        "z": "8dda81f9590d2155",
        "name": "Register",
        "events": "all",
        "x": 460,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "2a2a3ffaa364dfde",
        "type": "ui_text",
        "z": "8dda81f9590d2155",
        "group": "8c9655c44e9a8648",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload.status}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1510,
        "y": 760,
        "wires": []
    },
    {
        "id": "75b3306edd054621",
        "type": "ui_ui_control",
        "z": "8dda81f9590d2155",
        "name": "Login",
        "events": "change",
        "x": 1690,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "6915c5ee8e126ba3",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Go to Login",
        "func": "msg.payload = { tab: \"Authen\"}; // Thay \"Home\" bằng tab bạn muốn hiển thị\nmsg.payload.status = \"\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 720,
        "wires": [
            [
                "75b3306edd054621",
                "2a2a3ffaa364dfde"
            ]
        ]
    },
    {
        "id": "202cbd29b9fb33a0",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Check Password",
        "func": "const C = (typeof crypto !== \"undefined\") ? crypto : global.get(\"crypto\");\nconst rec = msg.payload;                      // { password: \"pbkdf2$...\" }\nconst pwd = String(msg.original_password || \"\");\nif (!rec || !rec.password) {\n    context.set(\"loggedIn\", false);\n    msg.payload = { status: \"❌ User not found\", loggedIn: false };\n    return [null, msg];\n}\n\nlet ok = false;\ntry {\n    const [tag, algo, iterStr, saltB64, hashB64] = rec.password.split(\"$\");\n    if (tag === \"pbkdf2\" && saltB64 && hashB64) {\n        const iter = parseInt(iterStr, 10) || 120000;\n        const salt = Buffer.from(saltB64, \"base64\");\n        const store = Buffer.from(hashB64, \"base64\");\n        const test = C.pbkdf2Sync(pwd, salt, iter, store.length, algo || \"sha256\");\n        ok = C.timingSafeEqual(test, store);\n    }\n} catch (e) { ok = false; }\n\nif (ok) {\n    context.set(\"loggedIn\", true);\n    msg.payload = { status: \"✅ Login successful\", loggedIn: true };\n    return [msg, null];\n}\ncontext.set(\"loggedIn\", false);\nmsg.payload = { status: \"❌ Wrong password\", loggedIn: false };\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            },
            {
                "var": "bcrypt",
                "module": "bcryptjs"
            }
        ],
        "x": 790,
        "y": 860,
        "wires": [
            [
                "7309939261f58be5"
            ],
            [
                "ece3d511f9ac706c"
            ]
        ]
    },
    {
        "id": "9e89bcf308c5169f",
        "type": "function",
        "z": "8dda81f9590d2155",
        "name": "Go to Login",
        "func": "msg.payload.status = \"\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 880,
        "wires": [
            [
                "ece3d511f9ac706c"
            ]
        ]
    },
    {
        "id": "84f6e65babf6af17",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "7e1cafa64399fa37",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "0e572d0f1350a14e",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 10,
        "width": 26,
        "height": 1
    },
    {
        "id": "ac384f34716e944a",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 11,
        "width": 26,
        "height": 1
    },
    {
        "id": "22a9070d9bee35ce",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 12,
        "width": 26,
        "height": 1
    },
    {
        "id": "fc2f3cd0daed797b",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 13,
        "width": 26,
        "height": 1
    },
    {
        "id": "7e54589c486688aa",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 14,
        "width": 26,
        "height": 1
    },
    {
        "id": "df2d08ed9b4c88fd",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 15,
        "width": 26,
        "height": 1
    },
    {
        "id": "938f4e9f6f1d3f26",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 17,
        "width": 16,
        "height": 1
    },
    {
        "id": "68cacc4b7a74c667",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 18,
        "width": 16,
        "height": 1
    },
    {
        "id": "f9796ef0514ba8fb",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 20,
        "width": 16,
        "height": 1
    },
    {
        "id": "89c308fe612d337f",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 21,
        "width": 16,
        "height": 1
    },
    {
        "id": "d13bbd91cccd1728",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 22,
        "width": 16,
        "height": 1
    },
    {
        "id": "a44200a14f39e7da",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "176a6dcb963246d5",
        "order": 23,
        "width": 16,
        "height": 1
    },
    {
        "id": "f6deaa281ad765e1",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "ui_grp_register",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "4f6de789eea1fc73",
        "type": "ui_spacer",
        "z": "8dda81f9590d2155",
        "name": "spacer",
        "group": "ui_grp_register",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "176a6dcb963246d5",
        "type": "ui_group",
        "name": "Main",
        "tab": "3b9e5927881a6d45",
        "order": 1,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e4f2654eb37bf1b3",
        "type": "mqtt-broker",
        "name": "http",
        "broker": "broker.hivemq.com",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9dff1546fd297e8c",
        "type": "ui_group",
        "name": "Main",
        "tab": "9f2637ddf31cbc5c",
        "order": 1,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_grp_register",
        "type": "ui_group",
        "name": "Login",
        "tab": "2db852160dca7be8",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8c9655c44e9a8648",
        "type": "ui_group",
        "name": "Register",
        "tab": "e3e66505fcef58a8",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3b9e5927881a6d45",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9f2637ddf31cbc5c",
        "type": "ui_tab",
        "name": "Logs",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2db852160dca7be8",
        "type": "ui_tab",
        "name": "Authen",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e3e66505fcef58a8",
        "type": "ui_tab",
        "name": "Register",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": true
    }
]
